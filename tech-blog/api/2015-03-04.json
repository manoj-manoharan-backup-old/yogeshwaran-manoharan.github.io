[{"title":"Centralizing distributed version control, revisited","description":"<p>7 years ago, I wrote a <a href=\"/centralizing-distributed-version-control/\" title=\"Centralizing Distributed Version Control\">blog\npost</a>\nabout how we at Jane Street were using our distributed version control system\n(<code class=\"highlighter-rouge\">hg</code>, though the story would be the same for <code class=\"highlighter-rouge\">git</code>) in a partially centralized\nway. Essentially, we built a centralized repo and a continuous integration\nsystem whose job was to merge in new changesets. The key responsibility of this\nsystem was to make sure that a change was rejected unless it merged, compiled\nand <a href=\"http://graydon2.dreamwidth.org/1597.html\" title=\"The Not Rocket Science Rule\">tested\ncleanly</a>.</p>\n\n","link":"https://blog.janestreet.com/centralizing-distributed-version-control-revisited/","owner":"InVision"},{"title":"Check And Update Outdated NPM Packages","description":"\n                    <p>The Node Package Manager (NPM), is becoming a major go-to resource for all development software and libraries. It is easy to use and covers a lot of ground.</p>\n<p>If you’re anything like me you’re going to have more than twenty global packages installed on your machine through NPM, but how do you go about tracking whether or not any of them have become outdated?</p>\n                    \n                        <p>The post <a rel='nofollow' href='https://www.thepolyglotdeveloper.com/2015/03/check-update-outdated-npm-packages/'>Check And Update Outdated NPM Packages</a> appeared first on <a rel='nofollow' href='https://www.thepolyglotdeveloper.com'>The Polyglot Developer</a>.</p>\n                    \n                ","link":"https://www.thepolyglotdeveloper.com/2015/03/check-update-outdated-npm-packages/","owner":"Nelson Elhage"}]