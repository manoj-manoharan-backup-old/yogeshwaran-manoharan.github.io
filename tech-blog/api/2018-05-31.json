[{"title":"Automatic Object Linkage, with Include Graphs","description":"<p>In this post I describe an alternative approach to\nsharing source code elements between multiple build targets.</p>\n<p>It's based on a custom build process I implemented at PathEngine\nfor our C and C++ code-base\n(but the core ideas could also be relevant to other languages with compilation to object files).</p>\n<p>We'll need to enforce some constraints on the way the source code is set up,\nnotably with regards to header file organisation,\nbut can then automatically determine what to include in the link operation for each build target,\nbased on a graph of include relationships extracted from the source files.</p>\n<p>The resulting dynamic, fine grained, object-file centric approach to \ncode sharing avoids the need for \nproblematic static library decomposition,\nand the associated 'false dependencies'. </p><h2 id=\"motivation\">Motivation</h2>\n<p>We need to work with a bunch of different build targets, at PathEngine.\nThere's a run-time pathfinding dll, for example, but also a 3D content p","link":"https://upcoder.com/19/automatic-object-linkage-with-include-graphs","owner":"Thomas Young"},{"title":"How Cockroach Labs Explores Brand Voice Through Diverse Illustrations","description":"Last year on the blog, we shared our point of view on product design and research, two of the three main responsibilities of the Design team at Cockroach Labs. The one that we haven&#x2019;t discussed yet is brand.\nDespite having a distinct and memorable name like Cockroach Labs, nailing our brand hasn&#x2019;t been simple and is still a work-in-progress. From day one, our mission has been to make data easy.","link":"https://www.cockroachlabs.com/blog/brand-voice-through-diverse-illustrations/","owner":"CockroachDB"}]