[{"title":"Friday Q&A 2017-09-22: Swift 4 Weak References\n","description":"Soon after Swift was initially open sourced, I wrote <a href=\"https://mikeash.com/pyblog/friday-qa-2015-12-11-swift-weak-references.html\">an article about how weak references are implemented</a>. Time moves on and things change, and the implementation is different from what it once was. Today I'm going to talk about the current implementation and how it works compared to the old one, a topic suggested by Guillaume Lessard.<br><a href=\"http://www.mikeash.com/pyblog/friday-qa-2017-09-22-swift-4-weak-references.html\">(Read More)</a>","link":"http://www.mikeash.com/pyblog/friday-qa-2017-09-22-swift-4-weak-references.html","owner":"Miguel Quinones"},{"title":"Static Libs Do Not Modular Make","description":"<p>A cautionary tale about <a href=\"https://en.wikipedia.org/wiki/Static_library\">statically-linked libraries</a>, as generated by C/C++ build tools.</p>\n<p>As a project accumulates features, and <em>complexity</em>, it gets harder to understand exactly what's going on,\nand to find your way around the source code. You need to find some way to organise the code and try and keep things manageable.</p>\n<p>A common idea, in this situation, is to group some source files together to split out as a static library.</p>\n<p>I'm going to argue that this actually does very little, in itself, to increase modularity, can\nhave the effect of significantly <em>increasing</em> dependencies, and is maybe not such a good idea, after all.</p><h2 id=\"break-it-apart\">Break it apart?</h2>\n<p>So yeah, when something gets too big to work with,\nit makes sense to try to break it into pieces.</p>\n<p>Given a whole bunch of source files to work with, we probably want 'pieces' bigger than individual source files,\nand","link":"https://upcoder.com/18/static-libs-do-not-modular-make","owner":"The Daily WTF"}]