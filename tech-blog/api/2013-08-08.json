[{"title":"Unexpected area to collect garbage in .NET","description":"<p>The .NET framework provides an intelligent garbage collector that saves us a trouble of manual memory management. And in 95% of cases you can forget about memory and related issues. But the remaining 5% have some specific aspects connected to unmanaged resources, too big objects, etc. And it’s better to know how the garbage is collected. Otherwise, you can get surprises.</p>\n<p>Do you think GC is able to collect an object till its last method is complete? It appears it is. But it is necessary to run an application in release mode without debugging. In this case JIT compiler will perform optimizations that will make this situation possible. Of course, JIT compiler does it when the remaining method body doesn’t contain references to the object or its fields. It should seem a very harmless optimization. But it can lead to the problems if you work with the unmanaged resources: object compilation can be executed before the operation over the unmanaged resource is finished. And most likel","link":"https://aakinshin.net/posts/gc-native/","owner":"Andrew Ray"},{"title":"Using Time, Timezones and Location in Go","description":"I ran into a problem today. I was building code to consume NOAA&rsquo;s tide station XML document and quickly realized I was in trouble. Here is a small piece of that XML document:\n&lt;timezone&gt;LST/LDT&lt;/timezone&gt;\n&lt;item&gt;\n&lt;date&gt;2013/01/01&lt;/date&gt;\n&lt;day&gt;Tue&lt;/day&gt;\n&lt;time&gt;02:06 AM&lt;/time&gt;\n&lt;predictions_in_ft&gt;19.7&lt;/predictions_in_ft&gt;\n&lt;predictions_in_cm&gt;600&lt;/predictions_in_cm&gt;\n&lt;highlow&gt;H&lt;/highlow&gt;\n&lt;/item&gt; If you notice the timezone tag, it states the time is in Local Standard Time / Local Daylight Time. This is a real problem because I need to store this data in UTC.","link":"https://www.ardanlabs.com/blog/2013/08/using-time-timezones-and-location-in-go.html","owner":"Wilfred Hughes"}]