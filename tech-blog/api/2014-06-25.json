[{"title":"Actionable Data With MongoDB and Go","description":"Introduction\nIf you are building any kind of application for a consumer based product, it is common to have large amounts of application data being generated about your users. Running reports is a traditional use of this data, but what if you could make this data actionable? What if you could adapt the user experience by aggregating and testing this data against rules that could dictate actions or special messaging?","link":"https://www.ardanlabs.com/blog/2014/06/actionable-data-with-mongodb-and-go.html","owner":"Wilfred Hughes"},{"title":"Select and Map Are Good","description":"<p>This article argues that <em>when able to</em> one should break down\niteration operations over an array into <code>#map</code> and <code>#select</code> as opposed to\noperating on the enumerable through an <code>#each</code>.</p>\n\n<h2>The Examples</h2>\n\n<p>Throughout this article I will refer to the following, contrived, example:</p>\n\n<p>You have an array of numbers <code>[1, 2, 3, 4, 5]</code> and you want to subtract 3\nfrom each of the items and then remove all items that are 0.</p>\n\n<p>A) Using <code>#each</code> you could express this as:</p>\n<div class=\"highlight\"><pre><code class=\"language-ruby\" data-lang=\"ruby\"><span class=\"n\">the_array</span> <span class=\"o\">=</span> <span class=\"o\">[</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"mi\">3</span><span class=\"p\">,</span> <span class=\"mi\">4</span><span class=\"p\">,</span> <span class=\"mi\">5</span><span class=\"o\">]</span>\n<span class=\"n\">new_array</span> <span c","link":"https://techblog.thescore.com/2014/06/25/select-and-map-are-good/","owner":"Teespring"},{"title":"Simple Ways to Protect an API: HTTP Basic Authentication and HTTP Token Authentication","description":"<p>The backend for theScore mobile apps consists of many different web services (Core\nSports, Personalization, Push Alerts, etc.). Each service provides its own RESTful API.\nSome of these services are internal. As such, they only have a very limited number of\nconsumers. Having a limited number of consumers for an API lets you keep the authentication\nreally simple for that API.</p>\n\n<p>For the purposes of this blog post, suppose that we have two services. One that is responsible\nfor detecting alerts (i.e. new goal is scored), and another that is responsible for actually\nsending those alerts to mobile devices. Let&#39;s call these <code>Detector</code> and <code>Sender</code> respectively.\nAlso, suppose that <code>Sender</code> is a web service, and <code>Detector</code> is a background processing system.\nFurther, whenever <code>Detector</code> detects an alert, it uses the API provided by <code>Sender</code> to deliver\nthe alerts.</p>\n\n<p>The internals of the services described above wo","link":"https://techblog.thescore.com/2014/06/25/http-basic-authentication-and-http-token-authentication/","owner":"Teespring"}]