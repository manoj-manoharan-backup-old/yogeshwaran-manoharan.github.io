[{"title":"Autodeploy from github using AWS CodeDeploy","description":"AWS CodeDeploy is part of Amazon deployment services which can be used to deploy your application across EC2 instances. This post will walk you through how to setup aws codedeploy for you application on github.\nCreate AWS IAM roles The first step towards setting up codedeploy is to setup two IAM roles. One for codedeploy to talk to EC2 instances and other for EC2 instance to access s3.\nA IAM role is a set of permission policies that can be used to grant access to various AWS resources by associating with either by an IAM user in same account or different.","link":"https://crypt.codemancers.com/posts/2016-12-26-autodeploy-from-github-using-aws-codedeploy/","owner":"Codelitt"},{"title":"Create A Real Time Chat App With Golang, Angular, And Websockets","description":"\n                    <p>I’ve been hearing a lot about websockets lately and how they can accomplish real time communication between applications and servers. They act as a compliment and possible alternative to RESTful APIs that have been around for significantly longer. With websockets you can do real time messaging for things like chat, communication with IoT, gaming, and a whole lot of other things that need instant communication between clients and the server.</p>\n<p>A while back I had played around with <a href=\"https://www.thepolyglotdeveloper.com/2016/01/create-a-real-time-chat-application-with-the-cean-stack-and-socket-io/\">websockets and Node.js using a library called Socket.io</a>, but since I’ve been really getting into Golang I wanted to explore websockets using the Go programming language.</p>\n<p>We’re going to check out how to create a chat application where the client is an Angular application and the server is a Golang application.</p>\n                    \n             ","link":"https://www.thepolyglotdeveloper.com/2016/12/create-real-time-chat-app-golang-angular-2-websockets/","owner":"Nelson Elhage"},{"title":"Performance exercise: Division","description":"<p>In the previous post, we <a href=\"https://aakinshin.net/en/blog/dotnet/perfex-min/\">discussed</a> the performance space of the minimum function\nwhich was implemented via a simple ternary operator and with the help of bit magic.\nNow we continue to talk about performance and bit hacks.\nIn particular, we will divide a positive number by three:</p>\n<div class=\"highlight\"><pre class=\"chroma\"><code class=\"language-cs\" data-lang=\"cs\"><span class=\"kt\">uint</span> <span class=\"n\">Div3Simple</span><span class=\"p\">(</span><span class=\"kt\">uint</span> <span class=\"n\">n</span><span class=\"p\">)</span> <span class=\"p\">=&gt;</span> <span class=\"n\">n</span> <span class=\"p\">/</span> <span class=\"m\">3</span><span class=\"p\">;</span>\n<span class=\"kt\">uint</span> <span class=\"n\">Div3BitHacks</span><span class=\"p\">(</span><span class=\"kt\">uint</span> <span class=\"n\">n</span><span class=\"p\">)</span> <span class=\"p\">=&gt;</span> <span class=\"p\">(</span><span class=\"kt\">uint</span><span class=\"p\">)((</span><","link":"https://aakinshin.net/posts/perfex-div/","owner":"Andrew Ray"}]