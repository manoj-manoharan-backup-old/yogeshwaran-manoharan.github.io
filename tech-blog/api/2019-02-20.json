[{"title":"\nAn update about Redis developments in 2019\n","description":"Yesterday a concerned Redis user wrote the following on Hacker News:\n","link":"\nhttp://antirez.com/news/126\n","owner":"Antirez"},{"title":"Developing A RESTful API With Golang And A MongoDB NoSQL Database","description":"\n                    <p>If you&rsquo;ve been following along, you&rsquo;re probably familiar with my love of Node.js and the Go programming language. Over the past few weeks I&rsquo;ve been writing a lot about API development with MongoDB and Node.js, but did you know that <a href=\"https://www.mongodb.com/\">MongoDB</a> also has an official SDK for <a href=\"https://golang.org/\">Golang</a>? As of now the SDK is in beta, but at least it exists and is progressing.</p>\n<p>The good news is that it isn&rsquo;t difficult to develop with the Go SDK for MongoDB and you can accomplish quite a bit with it.</p>\n<p>In this tutorial we&rsquo;re going to take a look at building a simple REST API that leverages the Go SDK for creating data and querying in a MongoDB NoSQL database.</p>\n                    \n                        <p>The post <a rel='nofollow' href='https://www.thepolyglotdeveloper.com/2019/02/developing-restful-api-golang-mongodb-nosql-database/'>Developing A RESTful API With Golang And","link":"https://www.thepolyglotdeveloper.com/2019/02/developing-restful-api-golang-mongodb-nosql-database/","owner":"Nic Raboy"},{"title":"Spring internals - BeanPostProcessor","description":"\n<div class=\"paragraph\">\n<p>Have you ever wondered how spring does things? How field annotated with <code>@Autowired</code> is populated?\nHow asynchronous or scheduled methods are discovered. In this post, I’m going to take a deeper look\nand scratch a bit on the surface of spring internals. I&#8217;ll focus on <code>BeanPostProcessor</code> interface\nwhich can be used to achieve interesting things and is used in many various functionalities across\nspring framework itself.</p>\n</div>\n<p><a href=\"https://blog.pchudzik.com/201902/beanpostprocessor/\">Read more</a></p>","link":"https://blog.pchudzik.com/201902/beanpostprocessor/","owner":"Paweł Chudzik"},{"title":"Tips for Using AWS X-Ray Traces for Long-Running Requests","description":"<h2 id=\"tips-for-using-aws-x-ray-traces-for-long-running-requests\">Tips for Using AWS X-Ray Traces for Long-Running Requests</h2>\n\n<p><a href=\"https://aws.amazon.com/xray/\">AWS X-Ray</a> is a tool for understanding how requests flow through your microservices and identifying any issues or performance bottlenecks. A single trace can show how one request into the system flows to all of the backend services.</p>\n\n<p>AWS advertises that a single trace can store up to 500 KB, which is enough to illustrate your trace in fine detail — hundreds or thousands of segments.</p>\n\n<p>However, if your trace proceeds slowly, you might discover that your trace will be closed prematurely and your remaining updates will be rejected.</p>\n\n<p>Why is this?</p>\n\n<p>A trace can actually be open for seven days. However, there are undocumented “dynamic” limits that kick in, which may mean that you have far less than the advertised 500 KB of data to work with in your trace.</p>\n\n<p>Here’s the result of a simple ","link":"http://eng.rightscale.com/2019/02/20/xray-traces-shrinking-limits.html","owner":"Rightscale"}]