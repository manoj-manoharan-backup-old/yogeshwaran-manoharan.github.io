[{"title":"Objective-C  id  as Swift  Any ","description":" Swift 3 interfaces with Objective-C APIs in a more powerful way than previous versions. For instance, Swift 2 mapped the  id  type in Objective-C to the  AnyObject  type in Swift, which normally can hold only values of class types. Swift 2 also provided implicit conversions to  AnyObject for some bridged value types, such as  String ,  Array ,  Dictionary ,  Set , and some numbers, as a convenience so that the native Swift types could be used easily with Cocoa APIs that expected  NSString ,  NSArray , or the other container classes from Foundation. These conversions were inconsistent with the rest of the language, making it difficult to understand what exactly could be used as an  AnyObject , resulting in bugs.  In Swift 3, the  id  type in Objective-C now maps to the  Any  type in Swift, which describes a value of any type, whether a class, enum, struct, or any other Swift type. This change makes Objective-C APIs more flexible in Swift, because Swift-defined value types can be passed","link":"https://developer.apple.com/swift/blog/?id=39","owner":"Sketch"}]