[{"title":"A Year Without a Byte","description":"One of the largest cost drivers in running a service like Flickr is storage. We’ve described multiple techniques to get this cost down over the years: use of COS, creating sizes dynamically on GPUs and perceptual compression. These projects have … ","link":"https://code.flickr.net/2017/01/05/a-year-without-a-byte/","owner":"Firmafon"},{"title":"Internationalization In A NativeScript Mobile App With Angular","description":"\n                    <p>I’m an English only speaker, reader, and writer, so when I download an application from iTunes or Google Play, it is going to be in English. There are many people like this, but possibly in a language other than English. When I release my English-only application, how much of the world am I neglecting?  To get the most success for your application, it makes sense to add internationalization (i18n) support so users can access your application in their native language.</p>\n<p>Back in my AngularJS days I was using an incredible library called <a href=\"https://github.com/angular-translate/angular-translate\">ng-translate</a> and lucky for me, and everyone else, there is a variation of that same library for later versions of Angular. This new library, called <a href=\"https://github.com/ocombe/ng2-translate\">ng2-translate</a>, accomplishes the task of multiple language support in your application.</p>\n<p>We’re going to see how to add internationalization support to our","link":"https://www.thepolyglotdeveloper.com/2017/01/internationalization-nativescript-mobile-app-angular/","owner":"Nelson Elhage"}]