[{"title":"Cross-runtime .NET disassembly with BenchmarkDotNet","description":"<p><a href=\"https://github.com/dotnet/BenchmarkDotNet\">BenchmarkDotNet</a> is a cool tool for benchmarking.\nIt has a lot of useful features that help you with performance investigations.\nHowever, you can use these features even if you are not actually going to benchmark something.\nOne of these features is <code>DisassemblyDiagnoser</code>.\nIt shows you a disassembly listing of your code for all required runtimes.\nIn this post, I will show you how to get disassembly listing for .NET Framework, .NET Core, and Mono with one click!\nYou can do it with a very small code snippet like this:</p>\n<div class=\"highlight\"><pre class=\"chroma\"><code class=\"language-cs\" data-lang=\"cs\"><span class=\"na\">[DryCoreJob, DryMonoJob, DryClrJob(Platform.X86)]</span>\n<span class=\"na\">[DisassemblyDiagnoser]</span>\n<span class=\"k\">public</span> <span class=\"k\">class</span> <span class=\"nc\">IntroDisasm</span>\n<span class=\"p\">{</span>\n<span class=\"na\"> [Benchmark]</span>\n<span class=\"k\">public</span> <span class=\"k","link":"https://aakinshin.net/posts/dotnet-crossruntime-disasm/","owner":"Andrew Ray"},{"title":"Designing HTML for Safari Reader Mode","description":"For whatever reason, Apple doesn’t provide any guidance on how to design for Safari Reader Mode . Maybe they want the right to change it at any time or maybe it’s to prevent abuse and advertising sneaking in. Likewise, it’s near impossible to find any third-party guidance on how to structure your HTML. It’s mostly guessing, checking reader mode, editing HTML, reloading until it works. But after looking at the Reader javascript source code, and a lot of View Source on numerous publications, I’ve come up with some rules on how to structure HTML to optimize for Reader.","link":"https://www.client9.com/designing-html-for-safari-reader-mode/","owner":"Nick Desaulniers"}]