[{"title":"Giving Back with 24 Pull Requests","description":"<p><strong>What would we do without all those magnificent Gems and Rubies?</strong> Thanks to\nthe many developers that make them and open their source, we can develop great\napps.</p>\n\n<p><strong>Now is the time to give back.</strong> Itâ€™s time to say thanks to their authors, to\nsend them a pull request, to send them back 24 little gifts and join the\n<a href=\"http://24pullrequests.com/\">24 Pull Requests movement</a>.</p>\n\n<p>24 Pull Requests is a yearly initiative designed to let you give back little\ngifts of code over the holiday season. Just visit\n<a href=\"http://24pullrequests.com/contributing\">24pullrequests.com/contributing</a> to\nfind out how to contribute a pull-request a day in the days leading up to\nChristmas.</p>\n\n<p>We at <a href=\"https://pullreview.com\">PullReview</a> want to join and support this\ninitiative. <strong>PullReview can help you contribute</strong>, it can underline and explain\nwhere you could improve the code quality, fix vulnerabilities, or add a missing\ntest. ","link":"http://blog.8thcolor.com/en/2014/12/giving-back-with-24pullrequests/","owner":"PubNub:"},{"title":"Inspecting the Environment of a Running Process","description":"<p>Sometimes its useful to be able see the values of environment variables in\nrunning processes. We can use the following test program to see how well we can\naccomplish this:</p>\n\n","link":"https://blog.janestreet.com/inspecting-the-environment-of-a-running-process/","owner":"InVision"},{"title":"Making a Mockery of Python","description":"<p>Today we will be talking about mocking. No, not the joke at someone else's expense kind. Mocking is a technique to temporarily replace <strong>real</strong> parts of our code with <strong>fake</strong>, simpler parts, so that we can check that the rest of the parts are working as we intend. Here we'll consider some simple use cases for mocking in Python tests, and try to show how this extremely useful technique can make us better at testing.</p>\n<h2>Why do we mock?</h2>\n<p>When we carry out unit testing, our goal is to test a small section of code - for example a function or class method - in isolation. In other words, we should only be testing the code that is contained in said function. If we rely on calls to other pieces of code in our test, then we find ourselves in an unfortunate situation where changes to the nested code can break the test, despite the code of the function being tested remaining the same. This is best illustrated by example:</p>\n<div class=\"highlight\"><pre><sp","link":"http://engineroom.trackmaven.com/blog/making-a-mockery-of-python/","owner":"Toptal"}]