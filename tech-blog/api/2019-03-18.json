[{"title":"Integration Testing in Go: Part I - Executing Tests with Docker","description":"Introduction “Testing leads to failure, and failure leads to understanding.” - Burt Rutan\nBurt Rutan is an aerospace engineer who designed Voyager, the first plane to fly around the world without stopping or refueling. Although Rutan was not a software engineer, his words speak volumes to the importance of testing, even testing software. Testing software in all forms is extremely important, whether it be unit, integration, system, or acceptance testing.","link":"https://www.ardanlabs.com/blog/2019/03/integration-testing-in-go-executing-tests-with-docker.html","owner":"Wilfred Hughes"},{"title":"Validating Data Structures And Variables In Golang","description":"\n                    <p>When working with Go or any programming language for that matter, there is almost aways a need to validate the data that the user provides before you start working with it or storing it in a database. A sloppy way to validate data would be to use a series of if/else conditions, switch statements, and a bunch of regular expressions, but there are better ways to get the job done without having a disaster of a codebase in terms of maintainability.</p>\n<p>We&rsquo;re going to see how to use the <a href=\"https://github.com/go-playground/validator\">validator.v9</a> package in <a href=\"https://golang.org/\">Golang</a> to validate native Go data structures, their fields, and any variables that don&rsquo;t quite fit in.</p>\n                    \n                        <p>The post <a rel='nofollow' href='https://www.thepolyglotdeveloper.com/2019/03/validating-data-structures-variables-golang/'>Validating Data Structures And Variables In Golang</a> appeared first on <a rel=","link":"https://www.thepolyglotdeveloper.com/2019/03/validating-data-structures-variables-golang/","owner":"Nelson Elhage"}]