[{"title":"Cross-compiling with musl Toolchains","description":"<p>When working on command-line utilities which can be useful for various platforms, from Windows on x86 to Linux on MIPS, the existence of a cross-compilation is highly attractive. A number of different binaries can be constructed conveniently from a single, typically powerful host system.</p>\n\n<p><a href=\"https://alpinelinux.org\">Alpine Linux</a> popularizes the use of <a href=\"https://musl.libc.org\">musl</a> a no-frills C standard library for Linux. According to its website:</p>\n\n<blockquote>\n<p>musl is lightweight, fast, simple, free, and strives to be correct in the sense of standards-conformance and safety.</p>\n</blockquote>\n\n<p>In addition, thanks to <a href=\"https://zv.io\">Zach van Rijn</a>, we have a collection of static toolchains based on musl at <a href=\"https://musl.cc\">musl.cc</a> at our disposal. The number of supported systems is rather mind blowing, you got everything from the usual i686 to MIPS to Microblaze and many others.\n<a href=\"https://github.com/ariya/fastlz/ac","link":"https://ariya.io/2020/06/cross-compiling-with-musl-toolchains","owner":"Ariya Hidayat"},{"title":"DoubleMAD outlier detector based on the Harrell-Davis quantile estimator","description":"<p>Outlier detection is an important step in data processing.\nUnfortunately, if the distribution is not normal (e.g., right-skewed and heavy-tailed), it&rsquo;s hard to choose\na robust outlier detection algorithm that will not be affected by tricky distribution properties.\nDuring the last several years, I tried many different approaches, but I was not satisfied with their results.\nFinally, I found an algorithm to which I have (almost) no complaints.\nIt&rsquo;s based on the <em>double median absolute deviation</em> and the <em>Harrell-Davis quantile estimator</em>.\nIn this post, I will show how it works and why it&rsquo;s better than some other approaches.</p>","link":"https://aakinshin.net/posts/harrell-davis-double-mad-outlier-detector/","owner":"Andrey Akinshin"},{"title":"Really low latency multipliers and cryptographic puzzles","description":"<p>At Jane Street, we have some experience using FPGAs for low-latency\nsystems–FPGAs are programmable hardware where you get the speed of an\napplication-specific integrated circuit (ASIC) but without being\ncommitted to a design that’s burned into the chip. It wasn’t so long\nago that FPGAs were expensive and rare, but these days, you can rent a\n$5,000 card on the Amazon AWS cloud for less than $3 an hour.</p>\n\n","link":"https://blog.janestreet.com/really-low-latency-multipliers-and-cryptographic-puzzles/","owner":"Jane Street"},{"title":"When and Why to Use SELECT FOR UPDATE in CockroachDB","description":"We didn&#x2019;t implement SELECT FOR UPDATE to ensure consistency. Unlike Amazon Aurora, CockroachDB already guarantees serializable isolation, the highest isolation level provided by the ANSI SQL standard. Contention happens. And application developers shouldn&#x2019;t need to risk the integrity of their data when transactions contend. To combat this, CockroachDB must occasionally return errors prompting applications to retry transactions that would risk anomalies, such as write skews. This means that just like with PostgreSQL in serializable isolation, developers need to implement retry-loops for contended transactions.","link":"https://www.cockroachlabs.com/blog/when-and-why-to-use-select-for-update-in-cockroachdb/","owner":"CockroachDB"}]