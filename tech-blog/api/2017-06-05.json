[{"title":"BenchmarkDotNet v0.10.7","description":"<p>BenchmarkDotNet v0.10.7 has been released.\nIn this post, I will briefly cover the following features:</p>\n<ul>\n<li>LINQPad support</li>\n<li>Filters and categories</li>\n<li>Updated Setup/Cleanup attributes</li>\n<li>Better Value Types support</li>\n<li>Building Sources on Linux</li>\n</ul>","link":"https://aakinshin.net/posts/bdn-v0_10_7/","owner":"Andrew Ray"},{"title":"Extend Legacy Java Android Applications With NativeScript And Angular","description":"\n                    <p>As some of you might know, before I started developing cross platform mobile applications using Ionic Framework and NativeScript, I was developing Android applications using nothing more than the Android SDK and Java. I still have one of my first applications, <a href=\"https://play.google.com/store/apps/details?id=com.nraboy.sqltool\">SQLTool</a>, for sale in Google Play, and it was written with Java and Android. When building mobile applications, frameworks like NativeScript are incredibly attractive to web developers because they can use a common set of web design and development skills. However, NativeScript can be equally attractive to development teams writing Android applications with Java.</p>\n<p>With <a href=\"https://www.nativescript.org/\">NativeScript</a> you can actually build a “polyglot” type application where parts are Java and parts are NativeScript with Angular. To be clear, I’m not talking about rewriting your Java application into modules wrapped","link":"https://www.thepolyglotdeveloper.com/2017/06/legacy-android-java-nativescript-angular/","owner":"Nelson Elhage"}]