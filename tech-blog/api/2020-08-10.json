[{"title":"Building an Autocomplete Form Element with Atlas Search and JavaScript","description":"\n                    <p>When you&rsquo;re developing a web application, a quality user experience can make or break your application. A common application feature is to allow users to enter text into a search bar to find a specific piece of information. Rather than having the user enter information and hope it&rsquo;s valid, you can help your users find what they are looking for by offering autocomplete suggestions as they type.</p>\n<p>So what could go wrong?</p>\n<p>If your users are like me, they&rsquo;ll make multiple spelling mistakes for every one word of text. If you&rsquo;re creating an autocomplete field using regular expressions on your data, programming to account for misspellings and fat fingers is tough!</p>\n<p>In this tutorial, we&rsquo;re going to see how to create a simple web application that surfaces autocomplete suggestions to the user. These suggestions can be easily created using the full-text search features available in Atlas Search.</p>\n                    \n      ","link":"https://www.thepolyglotdeveloper.com/2020/08/building-autocomplete-form-element-atlas-search-javascript/","owner":"Nelson Elhage"},{"title":"CockroachDB & Spring Tutorials for Spring Data JDBC, JPA, & MyBatis","description":"From our enterprise customers to developer shops, a lot of folks use CockroachDB to back their Spring applications. It&#x2019;s no surprise; Java is the most widely used programming language in the world, running in over 3 billion devices. And no matter what kind of application you&#x2019;re running, the Spring ecosystem provides different data access patterns depending on your needs.&#xA0;\nWe&#x2019;ve recently added tutorials for a number of Spring data access patterns: Spring Data JDBC, Spring Data JPA, and MyBatis.","link":"https://www.cockroachlabs.com/blog/spring-data-access-tutorials/","owner":"Cloudflare"},{"title":"Limit Work for Reliable Servers (with examples in Go/gRPC)","description":"<p>One of the leading causes of cascading failures in software systems is trying to do too much work at the same time. Many servers, such as the Go HTTP and gRPC servers, will start working on an unlimited number of requests. Unfortunately, if requests arrive faster than they can be processed, a backlog of messages builds up. This eventually causes the server to be killed because it runs out of memory. To build reliable services, we must limit the amount of work that is in progress. This allows servers to survive overload scenarios by rejecting some of the work, rather than exploding. In this article, Iâ€™ll briefly describe why this happens, then discuss how to prevent it, with examples for Go HTTP and gRPC servers. (This was <a href=\"https://medium.com/bluecore-engineering/limit-work-for-reliable-servers-with-examples-in-go-grpc-72d2c83fb0f3\">originally written for the Bluecore Engineering blog</a>. This is also similar to <a href=\"https://www.evanjones.ca/prevent-server-overload.html\"","link":"https://www.evanjones.ca/rate-limit-for-reliable-servers.html","owner":"Evan Hahn"},{"title":"React v17.0 Release Candidate: No New Features","description":null,"link":"https://reactjs.org/blog/2020/08/10/react-v17-rc.html","owner":".NET"}]