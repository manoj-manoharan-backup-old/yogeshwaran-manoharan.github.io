[{"title":"The Robust Realtime Server","description":"\n<p>This is going to be a long blog post but I promise you will find some interesting\npiece of engineering here, so stay till the end.</p>\n\n<p><br />\nThe realtime server manages the live update of webpages when the data changes\nin the data storage system (database or cache). We had a realtime server\nin-place but there was a big problem with scaling it.</p>\n\n<p><br />\n####Problem with nowjs\nI was told beforehand that I will be primarily working first on writing a realtime server\nbeside many other things. <a href=\"http://www.hackerearth.com/users/vivekprakash\">Vivek Prakash</a> told me he had\nwritten a realtime server implementation <a href=\"http://engineering.hackerearth.com/2013/03/12/100000-strong\">sometime\nago</a> with\n<a href=\"https://github.com/Flotype/now\">nowjs</a>. But the problem with it is that it\ndoesn’t scale well beyond ~200 simultaneous connections. In a conversation on\nGoogle Groups, I came across this:</p>\n\n<p><br />\n<em>In my experience, the underlying “socket.io” modul","link":"http://engineering.hackerearth.com/2013/05/31/the-robust-realtime-server/","owner":"Gusto"},{"title":"Thread Pooling in Go Programming","description":"After working in Go for some time now, I learned how to use an unbuffered channel to build a pool of goroutines. I like this implementation better than what is implemented in this post. &nbsp;That being said, this post still has value in what it describes.\nhttps://github.com/goinggo/work\nIntroduction\nIn my world of server development thread pooling has been the key to building robust code on the Microsoft stack.","link":"https://www.ardanlabs.com/blog/2013/05/thread-pooling-in-go-programming.html","owner":"Wilfred Hughes"},{"title":"Why Go Programming","description":"For the past 20 years I have been writing server based and application software on the Microsoft stack. First in C/C++ leveraging the Win32 API and then in C# when .Net first was released. Over the past few months I have realized that trying to build scalable code on the Microsoft stack is becoming impossible. Why, Technology and Cost!!\nLet&rsquo;s start with the licensing. Luckily I was accepted into the Bizspark program.","link":"https://www.ardanlabs.com/blog/2013/05/why-go-programming.html","owner":"Wilfred Hughes"}]