[{"title":"Diff-Friendly Programming","description":"The day-to-day for most programmers isn’t writing code. It’s editing code. Specifically, editing code you didn’t write. And these edits are not typically pages and pages of fresh code. There are small changes here and there. And in the future, someone else will be editing these edits as well. Programming is a team sport.\nThese changes are often only evaluated in “diff” form (think GitHub pull request) and not the full context of the file.","link":"https://www.client9.com/diff-friendly-programming/","owner":"Nick Desaulniers"},{"title":"How to create a Data Container Component in React","description":"One pattern I’ve used quite a lot while working with React at the BBC and Discovery Channel is the Data Container pattern. It became popular in the last couple of years thanks to libraries like Redux and Komposer. The idea is simple. When you build UI components in React you feed data into them via… ","link":"https://blog.fedecarg.com/2018/03/24/react-data-container-component-pattern/","owner":"Fabrizio Branca"},{"title":"Never Use Naked If Statements","description":"For many programming languages based on the C-syntax style, the body of an if-statement is delimited by braces:\nif (foo == 1) { delete_everything(); } However, in Javascript, Java, PHP, C and C++, Java, PHP, “naked” if-statements are allowed. These have a single body statement without using braces.\nif (foo == 1) delete_everything(); if (foo == 1) delete_everything(); There are some other variation of naked statements, such are naked for-loops, but this is the most common.","link":"https://www.client9.com/never-use-naked-if-statements/","owner":"Nick Desaulniers"},{"title":"Rules for Programs Writing Programs","description":"I&#39;d rather write programs to write programs than write programs.Programming Pearls, Communications of the ACM, Sept. 1985 I write a lot of programs that write programs. I’ve found a few rules that makes the output and usage of these generated programs more useful.\nMake the output “diff friendly” By “diff friendly”, the output from “diff” or “git diff” should be clear to human on what changed, if anything. I wrote a whole article on diff friendly, but the TLDR is:","link":"https://www.client9.com/rules-for-programs-writing-programs/","owner":"Nick Desaulniers"},{"title":"Translating 800K lines of Javascript to Typescript","description":"","link":"https://medium.com/zoosk-engineering/translating-800k-lines-of-javascript-to-typescript-4a4324928af7?source=rss----95d50021e056---4","owner":"Zomato"}]