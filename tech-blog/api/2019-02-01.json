[{"title":"Abusing Kubernetes API server proxying","description":"The Kubernetes API server proxy allows a user outside of a Kubernetes cluster to connect to cluster IPs which otherwise might not be reachable. For example, this allows accessing a service which is only exposed within the clusterâ€™s network. The apiserver acts as a proxy and bastion between user and in-cluster endpoint.\n API server proxy security advisory Last summer, while performing penetration testing, we found an issue with Kubernetes API server proxying.","link":"/blog/2019/02/abusing-kubernetes-api-server-proxying/","owner":"King"},{"title":"Building Android Apps on Azure Pipelines","description":"<p>Azure Pipelines emerged as a new compelling all-in-one solution for continuous integration. How difficult is it to use it to compile, build, and package an Android app? Apparently, not difficult at all.</p>\n\n<p>To follow along, check out the sample repository at <a href=\"https://github.com/ariya/hello-android\">github.com/ariya/hello-android</a>. This is a minimalistic Android app in the style of the Hello World tradition. The principles however still apply to a complicated app.</p>\n\n<p>The key here is the configuration file (in YAML format) for <a href=\"https://azure.microsoft.com/en-us/services/devops/pipelines/\">Azure Pipelines</a>:</p>\n\n<pre><code class=\"language-yaml\">pool:\n  vmImage: 'macOS 10.13'\n\nsteps:\n- task: Gradle@2\n  inputs:\n    workingDirectory: ''\n    gradleWrapperFile: 'gradlew'\n    publishJUnitResults: false\n    tasks: 'assembleDebug'\n</code></pre>\n\n<p>First we have to choose where to build. In the above case, it is a hosted macOS machine (maintained by Azure), ident","link":"https://ariya.io/2019/01/building-android-apps-on-azure-pipelines","owner":"Ariejan de Vroom"}]