[{"title":"\nSide projects\n","description":"Today Redis is six years old. This is an incredible accomplishment for me, because in the past I switched to the next thing much faster. There are things that lasted six years in my past, but not like Redis, where after so much time, I still focus most of my everyday energies into.\n","link":"\nhttp://antirez.com/news/86\n","owner":"Andrey Akinshin"},{"title":"A story about JIT-x86 inlining and starg","description":"<p>Sometimes you can learn a lot during reading source .NET. Let&rsquo;s open the source code of a <code>Decimal</code> constructor from .NET Reference Source (<a href=\"http://referencesource.microsoft.com/#mscorlib/system/decimal.cs,158\">mscorlib/system/decimal.cs,158</a>):</p>\n<div class=\"highlight\"><pre class=\"chroma\"><code class=\"language-cs\" data-lang=\"cs\"><span class=\"c1\">// Constructs a Decimal from an integer value.\n</span><span class=\"c1\">//\n</span><span class=\"c1\"></span><span class=\"k\">public</span> <span class=\"n\">Decimal</span><span class=\"p\">(</span><span class=\"kt\">int</span> <span class=\"k\">value</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n<span class=\"c1\">// JIT today can&#39;t inline methods that contains &#34;starg&#34; opcode.\n</span><span class=\"c1\"></span> <span class=\"c1\">// For more details, see DevDiv Bugs 81184: x86 JIT CQ: Removing the inline striction of &#34;starg&#34;.\n</span><span class=\"c1\"></span> <span class=\"kt\">int</span> <span class=\"n\">","link":"https://aakinshin.net/posts/inlining-and-starg/","owner":"Andrew Ray"},{"title":"Logging millions of requests everyday and what it takes","description":"\n<p>HackerEarthâ€™s web servers handle millions of requests every day. These request\nlogs can be analyzed to mine some highly useful insights as well as metrics\ncritical for the business, for example, no. of views per day, no. of views per\nsub product, most popular user navigation flow etc.</p>\n\n<h3 id=\"initial-thoughts\">Initial Thoughts</h3>\n\n<p>HackerEarth uses Django as its primary web development framework and a host of\nother components which have been customized for performance and scalability.\nDuring normal operations, our servers handle 80-90 requests/sec on an average\nand this  surges to 200-250 requests/sec when multiple contests overlap in a\ntime delta. We needed a system which could easily scale to a peak traffic\n 500 requests/sec. Also, this system should add\nminimum processing overhead to the webservers and the data collected should be\nstored for crunching and offline processing.</p>\n\n<h3 id=\"architecture\">Architecture</h3>\n<p><img src=\"/images/logging_architecture.png\" /></","link":"http://engineering.hackerearth.com/2015/02/26/logging-millions-requests-what-it-takes/","owner":"Gusto"}]