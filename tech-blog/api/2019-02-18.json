[{"title":"Building a RESTful API Using ReactPHP and MySQL","description":"Today we will be looking at creating a RESTful API using ReactPHP, MySQL and nikic/FastRoute. Let’s look at the API we want to build and what it can do. Application We are going to build the API that: Handles CRUD operations on a resource (we are going to use users) Uses the proper HTTP verbs to make it RESTful (GET, POST, PUT, and DELETE) Returns JSON data All of this is pretty standard for RESTful APIs. Feel free to switch out users for anything you want for your application (orders, products, customers, etc). Getting Started Here is our file structure. We won’t need many files and we’ll keep this very simple for demonstration purposes. - src/ // Contains project files...","link":"http://sergeyzhuk.me/2019/02/18/restful-api-with-reactphp-and-mysql/","owner":"Sam Saffron"},{"title":"How High School Students Provide Hosting for Robotics Peers","description":null,"link":"https://www.ctl.io/developers/blog/post/high-school-students-hosting-robotics-peers","owner":"Capgemini"},{"title":"runc “breakout” Vulnerability Mitigated on Flatcar Linux","description":"Last week, a high severity vulnerability was disclosed by the maintainers of runc, under the name CVE-2019-5736: runc container breakout . This vulnerability has high severity (CVSS score 7.2) because it allows a malicious container to overwrite the host runc binary and gain root privileges on the host. According to our research, however, when using Flatcar Linux with its read-only filesystems this vulnerability is not exploitable.\nrunc vulnerability background In the context of our security work, we had been asked to evaluate the report’s severity with respect to the client’s installation.","link":"/blog/2019/02/runc-breakout-vulnerability-mitigated-on-flatcar-linux/","owner":"King"},{"title":"SOCKMAP - TCP splicing of the future","description":"","link":"https://idea.popcount.org/2019-02-18-sockmap---tcp-splicing-of-the-future","owner":"Marco Pivetta"},{"title":"Using Hapi.js, Mongoose, And MongoDB To Build A REST API","description":"\n                    <p>To continue on my trend of <a href=\"https://www.mongodb.com/\">MongoDB</a> with Node.js material, I thought it would be a good idea to use one of my favorite Node.js frameworks. Previously I had written about <a href=\"https://www.thepolyglotdeveloper.com/2019/02/building-rest-api-mongodb-mongoose-nodejs/\">using Express.js with Mongoose</a>, but this time I wanted to evaluate the same tasks using Hapi.js.</p>\n<p>In this tutorial we&rsquo;re going to develop a simple RESTful API using <a href=\"https://hapijs.com/\">Hapi.js</a>, Joi and Mongoose as the backend framework, and MongoDB as the NoSQL database. Rather than just using Hapi.js as a drop in framework replacement, I wanted to improve upon what we had previously seen, by simplifying functions and validating client provided data.</p>\n                    \n                        <p>The post <a rel='nofollow' href='https://www.thepolyglotdeveloper.com/2019/02/using-hapijs-mongoose-mongodb-build-rest-api/'>Using Ha","link":"https://www.thepolyglotdeveloper.com/2019/02/using-hapijs-mongoose-mongodb-build-rest-api/","owner":"Nelson Elhage"}]