[{"title":"Conversions in spring","description":"\n<div class=\"paragraph\">\n<p>The story is really simple. I wanted to accept my class as rest controller method param. I decided\nthat I don&#8217;t want to convert a simple string to object every time and it would be faster if I do the\nconversion in the single place. After a quick research I&#8217;ve found\n<a href=\"https://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/core/convert/converter/Converter.html\">Converter</a>\ninterface which looked like perfect for the job. After some digging and investigation it turns out\nthat there is a lot of automagic in the Spring conversion service.</p>\n</div>\n<p><a href=\"https://blog.pchudzik.com/201711/conversions-in-spring/\">Read more</a></p>","link":"https://blog.pchudzik.com/201711/conversions-in-spring/","owner":"Paul Lewis"},{"title":"Friday Q&A 2017-11-10: Observing the A11's Heterogenous Cores\n","description":"Apple's newest mobile CPU, the A11, brings a new level of heterogeneous computing to iOS, with both high and low performance cores that are always on. With the release of the iPhone X, I set out to see if I could observe these heterogeneous cores in action.<br><a href=\"http://www.mikeash.com/pyblog/friday-qa-2017-11-10-observing-the-a11s-heterogenous-cores.html\">(Read More)</a>","link":"http://www.mikeash.com/pyblog/friday-qa-2017-11-10-observing-the-a11s-heterogenous-cores.html","owner":"Miguel Quinones"},{"title":"Java 9: Enhancements to the Stream API","description":"<p>In the <a href=\"/java-9-convenience-factory-methods-for-collections\">last post</a> in <a href=\"/series/#java-9\">this series</a>, we took a look at the new convenience factory methods for collections in Java 9. Collections play well with the Stream API, which learned a few new tricks since its introduction in Java 8 as well. There are 4 particularly exciting new features – let’s explore them with <a href=\"/java-9-jshell\">JShell</a>!</p> <h2...","link":"https://mirocupak.com/java-9-enhancements-to-the-stream-api/","owner":"Milosz Galazka"},{"title":"Process File Uploads In Node.js With Hapi Framework","description":"\n                    <p>When building a web application, I personally find file uploads to be the most complicated part of the job. For example, how do you accept the files, and what do you do with them after you&rsquo;ve received them in the request?</p>\n<p>Not too long ago I wrote about accepting <a href=\"https://www.thepolyglotdeveloper.com/2016/02/upload-files-to-node-js-using-angular-2/\">file uploads in Node.js sent via Angular</a>. In this example I was using Express and the Multer middleware. What if you&rsquo;re interested in using one of the more modern Node.js frameworks instead of Express?</p>\n<p>This time around we&rsquo;re going to explore processing file uploads with <a href=\"https://hapijs.com/\">Hapi</a> and Node.js.</p>\n                    \n                        <p>The post <a rel='nofollow' href='https://www.thepolyglotdeveloper.com/2017/11/process-file-uploads-nodejs-hapi-framework/'>Process File Uploads In Node.js With Hapi Framework</a> appeared first on <a rel='n","link":"https://www.thepolyglotdeveloper.com/2017/11/process-file-uploads-nodejs-hapi-framework/","owner":"Nelson Elhage"}]