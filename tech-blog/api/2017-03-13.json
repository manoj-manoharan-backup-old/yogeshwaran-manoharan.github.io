[{"title":"Faster Snowflake Queries through Clustering","description":"kg-card-begin: markdown","link":"https://eng.localytics.com/faster-snowflake-queries-through-clustering/","owner":"LiveRamp"},{"title":"Parse XML Data In A Golang Application","description":"\n                    <p>While I don’t see a lot of it anymore, XML is still a common data format that people use. I prefer JSON, but I don’t always have a say in how I receive data. Some time ago I wrote a few tutorials on which include <a href=\"https://www.thepolyglotdeveloper.com/2015/01/parse-xml-response-nodejs/\">parsing XML data with Node.js</a>, <a href=\"https://www.thepolyglotdeveloper.com/2015/04/parse-an-xml-response-with-java-dom4j/\">parsing XML data with Java</a>, and <a href=\"https://www.thepolyglotdeveloper.com/2014/09/parse-xml-response-php/\">parsing XML data with PHP</a>. If you’ve been keeping up, I’ve been doing a lot of development with the Go programming language which is why I think it would be a great idea to go over XML in Golang.</p>\n<p>Of the various programming languages, I think XML is the easiest to work with in the Go programming language. We’re going to see how to take XML data and unmarshal it into a custom structure. We’re also going to see how to take JS","link":"https://www.thepolyglotdeveloper.com/2017/03/parse-xml-data-in-a-golang-application/","owner":"Nelson Elhage"}]