[{"title":"From Wordpress to Jekyll","description":"<p>As you can see, we’ve moved to a brand new blog, powered by <a href=\"http://jekyllrb.com\">Jekyll</a>. This is a good opportunity to shed some light on a process that, although not terrifying, is not totally without surprises.</p>\n\n<p>  <strong>In software in particular, there are no <em>happy</em> surprises.</strong>   </p>\n\n<h2 id=\"switching\">Switching</h2>\n<p>When we started <a href=\"http://8thcolor.com\">8th color</a>, we set up this blog quickly as a way for us to write about our company and what we were doing. Since we started <a href=\"http://pullreview.com\">PullReview</a> a year ago, it has become strongly oriented towards <strong>Ruby code and sustainable code</strong>.</p>\n\n<p>The first version was in WordPress (self-hosted as we wanted freedom in the plugin selection) and it did the job for almost three years (<a href=\"http://blog.8thcolor.com/en/2011/05/hello-world/\">first post in May 2011</a>). What led us to look for an alternative was that when you wanted to do something","link":"http://blog.8thcolor.com/en/2014/05/migrate-from-wordpress/","owner":"PubNub:"},{"title":"How You Nest Modules Matters in Ruby","description":"<p>Ruby provides two different syntaxes to nest modules (and classes):</p>\n<div class=\"highlight\"><pre><code class=\"language-ruby\" data-lang=\"ruby\"><span class=\"c1\"># Syntax #1</span>\n<span class=\"k\">module</span> <span class=\"nn\">API</span>\n  <span class=\"k\">module</span> <span class=\"nn\">V1</span>\n  <span class=\"k\">end</span>\n<span class=\"k\">end</span>\n\n<span class=\"c1\"># Syntax #2</span>\n<span class=\"k\">module</span> <span class=\"nn\">API::V1</span>\n<span class=\"k\">end</span>\n</code></pre></div>\n<p>Syntax #2 requires that <code>API</code> module already exists. Most Rubyists know that.\nBesides this difference, they think that these two syntaxes are interchangeable.\nWith that line of thinking, what syntax to use for nesting modules turns out to\nbe a matter of preference.</p>\n\n<p>But, the syntax you choose matters, which I will demonstrate shortly with\nexamples that relate to how you would organize a versioned REST API.</p>\n\n<p>Modules are just constants in Ruby, as such, regular const","link":"https://techblog.thescore.com/2014/05/28/how-you-nest-modules-matters-in-ruby/","owner":"Teespring"}]