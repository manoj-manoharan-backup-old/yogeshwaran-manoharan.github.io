[{"title":"Creating a Code Review Culture, Part 2: Code Reviewers","description":"This is part two of a two-part series. In part one we looked at \r\norganizational culture, and how code authors can make their code easier to \r\nreview. In this final part, we’ll look at some strategies for performing \r\nmore thorough and empathetic code reviews.","link":"https://engineering.squarespace.com/blog/2019/code-review-culture-part-2","owner":"Squarespace"},{"title":"How (not) to sign a JSON object","description":"\n\n<p>Last year we did a blog post on interservice auth. This post is mostly about authenticating consumers to an API. That’s a related but subtly different problem: you can probably impose more requirements on your internal users than your customers. The idea is the same though: you’re trying to differentiate between a legitimate user and an attacker, usually by getting the legitimate user to prove that they know a credential that the attacker doesn’t.</p>\n\n<h1 id=\"you-don-t-really-want-a-signature\">You don’t really want a signature</h1>\n\n<p>When cryptography engineers say &ldquo;signature&rdquo; they tend to mean something asymmetric, like RSA or ECDSA. Developers reach for asymmetric tools too often. There are a lot of ways to screw them up. By comparison, symmetric “signing” (MACs) are easy to use and hard to screw up. HMAC is bulletproof and ubiquitous.</p>\n\n<p>Unless you have a good reason why you need an (asymmetric) signature, you want a MAC. If you really do want a signature, c","link":"https://latacora.micro.blog/2019/07/24/how-not-to.html","owner":"Latacora"},{"title":"Using IAM Roles with Session Policies for Least Privilege","description":null,"link":"https://engineering.clever.com/2019/07/24/using-iam-roles-with-session-policies-for-least-privilege/","owner":"Clever"}]