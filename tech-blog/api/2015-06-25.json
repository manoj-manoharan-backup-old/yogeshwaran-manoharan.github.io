[{"title":"5 things I’ve learned being a CTO in startups","description":"","link":"https://medium.com/unexpected-token/5-things-i-ve-learned-being-a-cto-in-startups-5467a5896396?source=rss----2d2624499d2---4","owner":"Ebay"},{"title":"Core Data and Aggregate Fetches In Swift","description":"You can find other articles on the interwebs about NSExpression and NSExpressionDescription, however, I wasn’t really satisfied with the explanations I’ve seen. I decided to write a post myself after I recently had to become much more intimate with the way Core Data aggregate fetches work. I hope this will make clear what has to […]","link":"http://www.cimgf.com/2015/06/25/core-data-and-aggregate-fetches-in-swift/","owner":"Clay McLeod"},{"title":"Database Transactions With pytest","description":"<p>At theScore, most of our projects are built on Rails so we&#39;re used to having testing tools built-in. We primarily use RSpec with Rails and that combo gives us a few things by default:</p>\n\n<ol>\n<li>Test discovery under <code>spec/</code> or <code>test/</code></li>\n<li>Automatic database transaction support per test</li>\n</ol>\n\n<p>We have an old, custom Python project that we&#39;ve been working with and slowly modernizing. The need for unit tests came up and I evaluated a few options. I ended up choosing <a href=\"https://pytest.org/\">pytest</a> as it seemed to be most modern and popular framework.</p>\n\n<p>By default, pytest is configured to discover tests in <em>all</em> directories and subdirectories. So, while it does work, it can be slow (because it crawls everything) and it can discover tests that it shouldn&#39;t (such as a vendored code).</p>\n\n<p>I worked around this issue by using the <code>norecursedirs</code> option. This option tells pytest which directories <em>not</e","link":"https://techblog.thescore.com/2015/06/25/database-transactions-with-pytest/","owner":"Teespring"}]