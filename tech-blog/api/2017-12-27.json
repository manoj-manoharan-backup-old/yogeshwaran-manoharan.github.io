[{"title":"Deploying Native Node.js Dependencies On AWS Lambda","description":"\n                    <p>I was recently working on a Functions as a Service (FaaS) project using AWS Lambda and Node.js. However, I was running into an issue where my package dependencies found in my <strong>node_modules</strong> directory were for the wrong platform once deployed to Lambda. This is not the first time I experienced a problem like this. I knew the issue straight away because I encountered the same thing when trying to use a <strong>node_modules</strong> directory generated on Mac from a Windows computer.</p>\n<p>When uploading a package developed with Node.js to AWS Lambda, the <strong>package.json</strong> file is not considered. Instead you are uploading a package that contains the <strong>node_modules</strong> directory and all dependencies. So how do you develop for AWS Lambda from Mac and Windows, but have it work once deployed?</p>\n<p>We&rsquo;re going to see how to use <a href=\"https://www.docker.com\">Docker</a> to get our Node.js FaaS project dependencies designed","link":"https://www.thepolyglotdeveloper.com/2017/12/deploying-native-nodejs-dependencies-aws-lambda/","owner":"Nic Raboy"}]