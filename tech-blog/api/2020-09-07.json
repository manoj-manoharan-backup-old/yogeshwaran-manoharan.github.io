[{"title":"Increase the Reliability of a Go Codebase with Object Constructors","description":"<p>Coming from a heavy production experience with languages such as C# and TypeScript, I must admit \nthat my journey with Go has been a bumpy ride so far, but it’s for sure a positive one overall. \nGo certainly shines in some parts such as its runtime efficiency, built-in \ntooling support and its simplicity which allows you to get up to speed with it so quickly! \nHowever, there are some areas where it limits your ability to express and model your \nsoftware in code in a robust way, especially in a codebase where you get to work on as a team \nsuch as lack of <a href=\"https://github.com/golang/go/issues/19412\">sum types</a> and generics support (luckily, <a href=\"https://go.googlesource.com/proposal/+/master/design/go2draft-generics-overview.md\">generics support seems to be on its way</a>). \nOne of these limitations I have come across is not <a href=\"https://twitter.com/tourismgeek/status/1074325233220374528\">having any built-in constructor support</a>.</p>\n\n<p>I stumbled upon this limita","link":"https://deliveroo.engineering/2020/09/07/increase-the-reliability-of-a-golang-codebase-with-object-constructors.html","owner":"DeferPanic"},{"title":"Zendesk’s Global Mesh Network- Part 2","description":"","link":"https://medium.com/zendesk-engineering/zendesks-global-mesh-network-part-2-e45c7c793368?source=rss----a88376ea904a---4","owner":"ZeeMee"}]