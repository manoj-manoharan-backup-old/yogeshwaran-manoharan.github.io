[{"title":"Basic XHP Abstractions","description":"<p>On the surface XHP is nothing more than eye candy, but used correctly it can greatly simplify development. Creating good abstractions has always been smart programming, but it&rsquo;s very difficult to do that for your HTML components without mucking up your rendering code. Enter XHP to the rescue. Here I&rsquo;ll show you some basic examples of how XHP can be used to abstract out your rendering logic. These will be pretty basic, but hopefully enough to give you some ideas for your own setups.<!-- more --></p>\n<p>Let&rsquo;s start off with a simple abstraction to render form inputs of a basic data object. We can create an XHP element that takes the object as a parameter and returns the correct HTML input:</p>\n<blockquote>\n<p><code>class :ui:data-input extends :x:element {<br/>  attribute<br/>    DataObject data @required,<br/>    string property @required;<br/><br/>  protected function render() {<br/>    $data = $this-&gt;getAttribute('data');<br/>    $property = $this-&gt;getAttrib","link":"https://codebeforethehorse.tumblr.com/post/3288864699","owner":"Stefan Parker"}]