[{"title":"Skeleton Meshes","description":"<p>This post explores a slightly unusual design choice for some key data structures at <a href=\"http://pathengine.com\">PathEngine</a>.</p>\n<p>More specifically, it's about\n<a href=\"https://en.wikipedia.org/wiki/Polygon_mesh\">polygon mesh</a> data structures (in C++),\nand follows on from a previous post\n<a href=\"http://upcoder.com/13/vector-meshes\">about polygon meshes 'in the style of std::vector'</a>.</p>\n<p>One of the consequences of a vector-like approach is\nthat mesh elements can be referenced by index,\nand then accessing elements by index means we can <em>break stuff apart</em>.</p>\n<p>It's a story of violated object oriented programming principles, broken encapsulation,\nand unsafe code, but the code we end up with is then <em>more functional</em> and a lot more fun to work with!</p><p>(This is part of\n<a href=\"http://upcoder.com/series/2/pathengine-meshes\">a series about meshes in PathEngine</a>,\nas well as another series <a href=\"http://upcoder.com/series/1/vectors-and-vector-ba","link":"https://upcoder.com/16/skeleton-meshes","owner":"The Daily WTF"}]