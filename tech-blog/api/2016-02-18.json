[{"title":"500 shades of Green","description":"<h1 id=\"500-shades-of-green\">500 shades of Green</h1>\n\n<p><img src=\"/assets/PublicContributionsGithub.png\" alt=\"Public contributions\" />\n<img src=\"/assets/PrivateContributionsGithub.png\" alt=\"Private contributions\" /></p>\n\n<p>No, it is not fake. I did it - I have managed to have real streak which last 500 days in a row and document it on Github. But, you can do it in a different way - there are couple of projects which allows you to create arbitrary history of your contributions (it uses a separate repository for that and well - it cheats using ability of <code class=\"highlighter-rouge\">git</code> to bend the time).</p>\n\n<p>One is <a href=\"https://github.com/gelstudios/gitfiti\">here</a>. :wink:</p>\n\n<p>No, it does not mean anything. I am not a better programmer than anyone else, definitely quantity does not involve quality (I will describe this in details below).</p>\n\n<p>No, it does not mean that I did not have proper holidays or that I have spent all my free time on that.</p>\n\n<h2 id=","link":"http://www.afronski.pl/2016/02/17/500-shades-of-green.html","owner":"William Kennedy"},{"title":"Use The HTTP Module Instead Of Fetch In NativeScript","description":"\n                    <p>Not too long ago I wrote about using the NativeScript <a href=\"https://www.thepolyglotdeveloper.com/2015/11/make-http-requests-in-a-nativescript-mobile-application/\">fetch module for making HTTP requests</a> in an Android and iOS mobile application. Personally I find that the <code>fetch</code> module is a bit awkward to use, so this time weâ€™re going to take a look at using the <code>http</code> module instead.</p>\n<p>The great thing about the NativeScript <code>http</code> module is that it is pretty much the same as it is in the other languages.</p>\n                    \n                        <p>The post <a rel='nofollow' href='https://www.thepolyglotdeveloper.com/2016/02/use-the-http-module-instead-of-fetch-in-nativescript/'>Use The HTTP Module Instead Of Fetch In NativeScript</a> appeared first on <a rel='nofollow' href='https://www.thepolyglotdeveloper.com'>The Polyglot Developer</a>.</p>\n                    \n                ","link":"https://www.thepolyglotdeveloper.com/2016/02/use-the-http-module-instead-of-fetch-in-nativescript/","owner":"Nelson Elhage"},{"title":"Why do we use TrackJS","description":"<h2 id=\"javascript-debugging-the-state-problem\">JavaScript debugging, the state problem</h2>\n\n<p>As many JavaScript developers know, tracking live production errors can be very challenging.\nThe reason is that regular log and error gathering systems, like Errbit and Airbrake, are designed to deal with RESTful APIs which are by definition stateless (at least mostly stateless, many practical webapps violate REST and include a small amount of state).\nOn the other hand SPAs (Single Page Applications) have an immense amount of state and all modern JavaScript frameworks exist to tackle the problem of this expansive state-space.</p>\n\n<p>As a rule, UI errors that end up in production only manifest themselves in a small portion of this vast state-space and tools that are designed only to capture the request (i.e. url, url params, env variables, etc which is what Errbit and similar tools do) fail to come up with reproducible error information.\nHence the frustration of front-end engineers having t","link":"http://eng.rightscale.com/2016/02/18/why-we-use-trackjs.html","owner":"RetailMeNot"}]