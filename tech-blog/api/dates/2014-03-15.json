[{"title":"Exported/Unexported Identifiers In Go","description":"Introduction\nOne of the first things I learned about in Go was using an uppercase or lowercase letter as the first letter when naming a type, variable or function. It was explained that when the first letter was capitalized, the identifier was public to any piece of code that wanted to use it. When the first letter was lowercase, the identifier was private and could only be accessed within the package it was declared.","link":"https://www.ardanlabs.com/blog/2014/03/exportedunexported-identifiers-in-go.html","owner":"William Kennedy"},{"title":"Type Descriptors Added to Array Attributes in XHP","description":"<p>A new level of validation has been added to XHP which will allow you to type-check your array attribute keys and values. What this means is that while before this change you were only able to validate attribute types (<code>bool</code>, <code>int</code>, <code>string</code>, etc.), now if the attribute is an <code>array</code> type you can validate its structure as well.<!-- more --></p>\n<p>The syntax matches the syntax to Facebook&rsquo;s recently open-sourced Hack language syntax:</p>\n<blockquote>\n<p><code>attribute array&lt;int&gt; integers;</code></p>\n</blockquote>\n<p>You can also specify keys:</p>\n<blockquote>\n<p><code>attribute array&lt;int, string&gt; strings;</code></p>\n</blockquote>\n<p>And you can nest array types:</p>\n<blockquote>\n<p><code>attribute array&lt;int, array&lt;string&gt;&gt; arrays-of-strings;</code></p>\n</blockquote>\n<p>Every attribute types is valid as the value of an array attribute (except <code>enum</code> and <code>var</code>), including the new <code>cal","link":"https://codebeforethehorse.tumblr.com/post/79602499732","owner":"Stefan Parker"}]