[{"title":"Converting a Project to XHP","description":"<p>Unless you&rsquo;re starting from scratch, using XHP is most likely going to take some refactoring of old HTML-as-string code. The problem is that because of XHP&rsquo;s auto-escaping to prevent XSS holes, you can&rsquo;t include strings of HTML as children into XHP elements. Fortunately there&rsquo;s something you can do to allow XHP to ignore certain strings and return them directly as HTML. This is essentially what Facebook had to do when we started converting our entire codebase into XHP in 2009.</p>\n<p><!-- more --></p>\n<p>First off, you&rsquo;ll need a marker for strings that should be ignored by XHP. The best way to do this is to create an object that holds the strings and you can easily do <code>instanceof</code> checks on it. Let&rsquo;s call this object <code>HTML</code> (protip: objects and classes exist in different contexts, so they can have the same name without problem).</p>\n<blockquote>\n<p><code>class HTML {<br/>  private $htmlString;<br/><br/>  public function __con","link":"https://codebeforethehorse.tumblr.com/post/87306947716","owner":"Stefan Parker"}]