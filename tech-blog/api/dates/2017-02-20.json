[{"title":"Design Philosophy On Packaging","description":"Prelude This post is part of a series of posts designed to make you think about your own design philosophy on different topics. If you haven’t read this post yet, please do so first:\nDevelop Your Design Philosophy\nAfter this post, read this next one:\nPackage Oriented Design\nIntroduction In an interview given to Brian Kernighan by Mihai Budiu in the year 2000, Brian was asked the following question:","link":"https://www.ardanlabs.com/blog/2017/02/design-philosophy-on-packaging.html","owner":"William Kennedy"},{"title":"Epoll is fundamentally broken 1/2","description":"","link":"https://idea.popcount.org/2017-02-20-epoll-is-fundamentally-broken-12","owner":"Marek Majkowski"},{"title":"Thoughts On Kubernetes","description":"I spent a while the last week porting livegrep.com from running directly AWS to running on Kubernetes on Google&rsquo;s Cloud Platform (specifically, the google container engine, which provisions and manages the cluster for me).\nI left this experience profoundly enthusiastic about the future of Kubernetes. I think that if Google can execute properly, it&rsquo;s clearly the future for how we build distributed applications. That said, it also feels like it has a ways to go yet.","link":"https://blog.nelhage.com/post/kubernetes/","owner":"Nelson Elhage"},{"title":"Tutorial: Get Started with Angular, Spring Boot, and Stormpath","description":null,"link":"https://stormpath.com/blog/tutorial-get-started-angular-spring-boot-stormpath","owner":"Stormpath"},{"title":"Unit Testing A Golang Application That Includes HTTP","description":"\n                    <p>When building a great application, it is a good idea to plan for proper testing of each of the components that make the application tick. Through unit testing, we can test each function within the application as a separate entity, to make sure it performs based on our testing criteria.</p>\n<p>But how do you do this in a Golang application?  What if you need to test endpoints that were created using the <a href=\"http://www.gorillatoolkit.org/pkg/mux\">Gorilla mux</a> package?</p>\n<p>We’re going to see how to develop unit tests for our functions as well as HTTP endpoints in a Golang application using the available Go testing framework.</p>\n                    \n                        <p>The post <a rel='nofollow' href='https://www.thepolyglotdeveloper.com/2017/02/unit-testing-golang-application-includes-http/'>Unit Testing A Golang Application That Includes HTTP</a> appeared first on <a rel='nofollow' href='https://www.thepolyglotdeveloper.com'>The Polyglot Develop","link":"https://www.thepolyglotdeveloper.com/2017/02/unit-testing-golang-application-includes-http/","owner":"Nic Raboy"}]