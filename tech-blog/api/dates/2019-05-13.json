[{"title":"Basics of Memory Access in WebAssembly","description":"<p>WebAssembly is getting more popular than ever. The use of WebAssembly outside the confinement of a web browser also starts to gain traction, as evidenced from projects such as WebAssembly Interface. Understanding the memory model of WebAssembly will be important in order to fully comprehend its power as well as its constraints.</p>\n\n<p>A typical demo of C/C++ targeting WebAssembly is a simple function, with primitive inputs and output. Here is one, <code>adder.c</code>:</p>\n\n<pre><code class=\"language-c\">int add(int a, int b) {\n    return a + b;\n}\n</code></pre>\n\n<p>which can be compiled as:</p>\n\n<pre><code class=\"language-bash\">$ emcc adder.c -o adder.js -s EXPORTED_FUNCTIONS='[&quot;_add&quot;]'\n</code></pre>\n\n<p>Beside producing the JavaScript file, <code>adder.js</code>, the above command also produced <code>adder.wasm</code>. Opening the JavaScript file reveals a lot of glue code produced by <a href=\"https://emscripten.org/\">Emscripten</a> to serve as the bridge between the Java","link":"https://ariya.io/2019/05/basics-of-memory-access-in-webassembly","owner":"Ariya Hidayat"},{"title":"Discovering patterns with React hooks","description":null,"link":"https://ponyfoo.com/articles/discovering-patterns-with-react-hooks","owner":"Pony Foo"},{"title":"Garbage Collection In Go : Part II - GC Traces","description":"Prelude This is the second post in a three part series that will provide an understanding of the mechanics and semantics behind the garbage collector in Go. This post focuses on how to generate GC traces and interpret them.\nIndex of the three part series:\n1) Garbage Collection In Go : Part I - Semantics\n2) Garbage Collection In Go : Part II - GC Traces\n2) Garbage Collection In Go : Part III - GC Pacing","link":"https://www.ardanlabs.com/blog/2019/05/garbage-collection-in-go-part2-gctraces.html","owner":"William Kennedy"},{"title":"How Expensify Engineers Save Hours Each Week With Stack Overflow For Teams","description":null,"link":"https://stackoverflow.blog/2019/05/13/how-expensify-engineers-save-hours-each-week-with-stack-overflow-for-teams/","owner":"Stack Overflow"},{"title":"Thoughts from AAAI 2019","description":"<p>At Jane Street, for the last several years, we have been increasingly interested\nin machine learning and its many use cases. This is why it was exciting when\nearlier this year myself and a few of my colleagues had the opportunity to\nattend the AAAI 2019 conference. Weâ€™d like to take this space to share with you\nsome of the interesting projects and themes we saw at the conference.</p>\n\n","link":"https://blog.janestreet.com/thoughts-from-aaai-19/","owner":"Jane Street"}]