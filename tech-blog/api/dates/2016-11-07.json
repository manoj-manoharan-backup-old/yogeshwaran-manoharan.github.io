[{"title":"Introducing Bloaty McBloatface: a size profiler for binaries","description":"<p>I’m very excited to announce that today I’m open-sourcing a\ntool I’ve been working on for several months at Google.\nIt’s called Bloaty McBloatface, and it lets you explore\nwhat’s taking up space in your <code class=\"language-plaintext highlighter-rouge\">.o</code>, <code class=\"language-plaintext highlighter-rouge\">.a</code>, <code class=\"language-plaintext highlighter-rouge\">.so</code>, and\nexecutable binary files.</p>\n\n<p>For the TL;DR, here are a couple examples of what Bloaty\noutput looks like.</p>\n\n<div class=\"language-plaintext highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>$ ./bloaty bloaty\n     VM SIZE                         FILE SIZE\n --------------                   --------------\n   0.0%       0 .debug_info        2.97Mi  38.3%\n   0.0%       0 .debug_loc         2.30Mi  29.7%\n   0.0%       0 .debug_str         1.03Mi  13.3%\n   0.0%       0 .debug_ranges       611Ki   7.7%\n  72.8%   332Ki .text               332Ki   4.2%\n   0.0%       0 .debug_line ","link":"https://blog.reverberate.org/2016/11/07/introducing-bloaty-mcbloatface.html","owner":"Josh Haberman"},{"title":"Personalize your sequences","description":"<p>Recently, we introduced a brand new version of Mixmax sequences. Today, we’re rolling out three more of your most-requested features:</p><p class=\"poet-read-more\"><a href=\"/blog/sequences-reports-personalization\" title=\"Read more of Personalize your sequences\">Continue reading</a></p>","link":"https://mixmax.com/blog/sequences-reports-personalization","owner":"Mixmax"},{"title":"Working With Shared Providers In A NativeScript Angular App","description":"\n                    <p>When building a NativeScript application with <a href=\"https://angular.io/\">Angular</a>, there are certain scenarios where you might want to share functions and variables across the pages of the application. There are other scenarios where you might want to pull similar functions into a class for code cleanliness. Both of these scenarios would find value in using Angular shared providers.</p>\n<p>Shared providers can be injected into the constructor methods of each page that you wish to use them. The providers can act as a singleton where the data and functions are global to the application rather than local to any specific page.</p>\n<p>We’re going to see how to create a provider for managing interactions with a database in an Angular <a href=\"https://www.nativescript.org/\">NativeScript</a> application.</p>\n                    \n                        <p>The post <a rel='nofollow' href='https://www.thepolyglotdeveloper.com/2016/11/working-shared-providers-natives","link":"https://www.thepolyglotdeveloper.com/2016/11/working-shared-providers-nativescript-angular-2-app/","owner":"Nic Raboy"}]