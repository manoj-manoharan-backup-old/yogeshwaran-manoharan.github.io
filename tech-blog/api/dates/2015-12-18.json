[{"title":"Chocolatey Community Feed State of the Union","description":"tl;dr: Everything on https://chocolatey.org/notice is coming to fruition! We’ve automatically tested over 6,500 packages, a validator service is coming up now to check quality and the unreviewed backlog has been reduced by 1,000 packages! We sincerely hope that the current … ","link":"http://feedproxy.google.com/~r/CodeBetter/~3/pTEQCtT2jJ0/","owner":"Code Better"},{"title":"Find The Application Version In Your NativeScript App","description":"\n                    <p>With all the buzz around <a href=\"https://www.nativescript.org/\">NativeScript</a>, I figured it was about time that I demonstrate how to access native features of a device without the use of any plugins. To start off slow I decided it might be convenient to see how to obtain the application version number and display it within the application.</p>\n<p>To be clear, there are plugins to do all this for you, but the point I’m trying to prove is how easy it is to access core features of iOS and Android with limited knowledge of both.</p>\n                    \n                        <p>The post <a rel='nofollow' href='https://www.thepolyglotdeveloper.com/2015/12/find-the-application-version-in-your-nativescript-app/'>Find The Application Version In Your NativeScript App</a> appeared first on <a rel='nofollow' href='https://www.thepolyglotdeveloper.com'>The Polyglot Developer</a>.</p>\n                    \n                ","link":"https://www.thepolyglotdeveloper.com/2015/12/find-the-application-version-in-your-nativescript-app/","owner":"Nic Raboy"},{"title":"Introduction to Fisticuffs","description":"<p><a href=\"https://github.com/scoremedia/Fisticuffs\">Fisticuffs</a> is a compact Swift framework for view-model bindings on iOS, inspired by <a href=\"http://knockoutjs.com\">KnockoutJS</a>.  It lets developers quickly set up responsive applications without needing to add intermediate view-updating logic.</p>\n\n<h2>Background</h2>\n\n<p>The <strong>Model-view-viewmodel (MVVM)</strong> pattern has gained a lot of traction in the iOS community over the past couple years, and for good reason.  Separating out the display logic (<em>&quot;view model&quot;</em>) from the actual display (<em>&quot;view&quot;</em>) has great benefits for code organization and testability.</p>\n\n<p>Fisticuffs simplifies the cycle of updating views based on view-model changes by extending UIKit components for data binding. By encapsulating presentation logic in view-models we can create testable view code. Adding a binding layer like Fisticuffs lets us quickly tie this presentation logic to a view without having to w","link":"https://techblog.thescore.com/2015/12/18/fisticuffs/","owner":"theScore"}]