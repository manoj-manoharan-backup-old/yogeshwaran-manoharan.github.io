[{"title":"Defining a Role with a Retrospective Activity","description":"Agile retrospectives are a widely used practice within engineering teams. They provide teams with a way to reflect on how they work and become better at what they do. One of the main benefits of retrospectives is that they empower teams to define and make changes by analyzing what happened in an iteration and by determining what can be improved moving forward. Here at SoundCloud, we hold retrospectives at the end of every iteration (every two weeks), and we often do them at the end of projects as well.","link":"https://developers.soundcloud.com/blog/defining-a-role-with-a-retrospective-activity","owner":"Soundcloud"},{"title":"Helpful: One Year On","description":"<p>It’s been a year since the first release of\n<a href=\"/blog/2017/08/30/helpful-adding-contextual-help-to-emacs/\">Helpful</a>!\nIt’s gained a ton of new features, and I’d love to share the\nhighlights with you.</p>\n\n<h2 id=\"tool-integration\">Tool Integration</h2>\n\n<p><img src=\"/assets/helpful_more_debugging.png\" /></p>\n\n<p>Emacs has some excellent built-in debugging tools that I wanted to\nexpose within Helpful. These tools missed the first release, but I’ve now\nhad the chance to build them.</p>\n\n<p>From a Helpful buffer, you can now toggle edebug on a function. This\nallows you to easily step through code.</p>\n\n<p>You can also toggle tracing. Tracing is an underrated built-in feature\nof Emacs. You can use it to confirm functions have the inputs and\noutputs you’re expecting. It’s really useful when exploring unfamiliar\ncode.</p>\n\n<p><img src=\"/assets/emacs_trace.png\" /></p>\n\n<p>In this example, I’ve enabled tracing on <code class=\"highlighter-rouge\">projectile-project-root</code> to\nsee w","link":"http://www.wilfred.me.uk/blog/2018/06/22/helpful-one-year-on/","owner":"Wilfred Hughes"}]