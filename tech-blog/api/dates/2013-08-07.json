[{"title":"Unobviousness in use of C# closures","description":"<p>C# gives us an ability to use closures. This is a powerful tool that allows anonymous methods and lambda-functions to capture unbound variables in their lexical scope. And many programmers in .NET world like using closures very much, but only few of them understand how they really work. Letâ€™s start with a simple sample:</p>\n<div class=\"highlight\"><pre class=\"chroma\"><code class=\"language-cs\" data-lang=\"cs\"><span class=\"k\">public</span> <span class=\"k\">void</span> <span class=\"n\">Run</span><span class=\"p\">()</span>\n<span class=\"p\">{</span>\n<span class=\"kt\">int</span> <span class=\"n\">e</span> <span class=\"p\">=</span> <span class=\"m\">1</span><span class=\"p\">;</span>\n<span class=\"n\">Foo</span><span class=\"p\">(</span><span class=\"n\">x</span> <span class=\"p\">=&gt;</span> <span class=\"n\">x</span> <span class=\"p\">+</span> <span class=\"n\">e</span><span class=\"p\">);</span>\n<span class=\"p\">}</span>\n</code></pre></div><p>Nothing complicated happens here: we just captured a local variable <code>","link":"https://aakinshin.net/posts/closures/","owner":"Andrey Akinshin"}]