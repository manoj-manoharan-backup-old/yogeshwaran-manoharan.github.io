[{"title":"Consistent return of hashCode in java","description":"\n<p>HashCode and equals implementations are hard. Usually, it&rsquo;s tricky to properly implement hashCode\nand equals method to fully fulfill contract from Java documentation. I&rsquo;m going to focus on just one\nthe point from the <a href=\"https://docs.oracle.com/javase/8/docs/api/java/lang/Object.html#hashCode--\">hashCode\ncontract</a>:</p>\n<blockquote>\n<p>whenever it is invoked on the same object more than once during an\nexecution of a Java application, the hashCode method must consistently\nreturn the same integer.</p>\n</blockquote>\n<p>Read it already? Do it again. Let it sink and think about impact of &ldquo;hashCode method must\nconsistently return the same integer&rdquo;</p>\n<p><a href=\"https://blog.pchudzik.com/201610/changing-hashcode/\">Read more</a></p>","link":"https://blog.pchudzik.com/201610/changing-hashcode/","owner":"Pawe≈Ç Chudzik"},{"title":"Meet the Team: Eduardo Del Balso","description":"","link":"https://tech.lendinghome.com/meet-the-team-eduardo-del-balso-dfad9adb6002?source=rss----68f0e2ba19fc---4","owner":"LendingHome"},{"title":"Testing Random, Valid SQL in CockroachDB","description":"Some months ago I started work on a way to test random SQL statements with CockroachDB. This is important to expose unintended behavior in our server. For example, we want to prevent valid SQL statements from unexpectedly crashing a server or using all of its CPU or memory.\nWe have already performed some small-scale fuzz testing, but fuzz testing often produces un-parseable input since it modifies bytes (although some fuzzers like AFL do attempt to produce clean input).","link":"https://www.cockroachlabs.com/blog/testing-random-valid-sql-in-cockroachdb/","owner":"CockroachDB"}]