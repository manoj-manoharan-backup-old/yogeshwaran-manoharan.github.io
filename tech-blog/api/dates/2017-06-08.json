[{"title":"Design Philosophy On Data And Semantics","description":"Prelude This is the final post in a four part series discussing the mechanics and design behind pointers, stacks, heaps, escape analysis and value/pointer semantics in Go. This post focuses on data and the design philosophies of applying value/pointer semantics in your code.\nIndex of the four part series:\n1) Language Mechanics On Stacks And Pointers\n2) Language Mechanics On Escape Analysis\n3) Language Mechanics On Memory Profiling\n4) Design Philosophy On Data And Semantics","link":"https://www.ardanlabs.com/blog/2017/06/design-philosophy-on-data-and-semantics.html","owner":"William Kennedy"},{"title":"Local and distributed query processing in CockroachDB","description":"When a CockroachDB node receives a SQL query, this is approximately what happens:\nThe pgwire module handles the communication with the client application, and receives the query from the client. The SQL text is analyzed and transformed into an Abstract Syntax Tree (AST). This is then further analyzed and transformed into a logical query plan which is a tree of relational operators like filter, render (project), join. Incidentally, the logical plan tree is the data reported by the EXPLAIN statement.","link":"https://www.cockroachlabs.com/blog/local-and-distributed-processing-in-cockroachdb/","owner":"CockroachDB"}]