[{"title":"3 Ways to Create Classes in Ruby","description":"<p>Classes are <a href=\"http://en.wikipedia.org/wiki/First-class_citizen\">first-class objects</a> in Ruby.\nAll classes happen to be instances of <code>Class</code>. In other words, classes are <code>Class</code> objects\njust like <code>&#39;hello&#39;</code> and <code>&#39;world&#39;</code> are <code>String</code> objects.</p>\n\n<p>Out of the box, there are 3 ways to create classes in Ruby.</p>\n\n<h2>Use the <code>class</code> Keyword</h2>\n\n<p>In the vast majority of the cases, you would use the <code>class</code> keyword to create a class.\nThis is usually called a class definition:</p>\n<div class=\"highlight\"><pre><code class=\"language-ruby\" data-lang=\"ruby\"><span class=\"k\">class</span> <span class=\"nc\">Customer</span>\n  <span class=\"kp\">attr_reader</span> <span class=\"ss\">:full_name</span><span class=\"p\">,</span> <span class=\"ss\">:card_type</span><span class=\"p\">,</span> <span class=\"ss\">:card_number</span>\n\n  <span class=\"k\">def</span> <span class=\"nf\">initialize</span><span class=\"p\">","link":"https://techblog.thescore.com/2014/07/19/3-ways-to-create-classes-in-ruby/","owner":"theScore"},{"title":"To Refactor Or Not To Refactor?","description":"<p>I like refactoring. No, I love refactoring. No, not even like this. I awfully love refactoring.</p>\n<p>I hate bad code and bad architecture. I feel quite creepy when I design a new feature and the near-by class contains absolute mess. I just can’t look at the sadly-looking variables. Sometimes before falling asleep I close my eyes and imagine what could be improved in the project. Sometimes I wake up at 3:00AM and go to my computer to improve something. I want to have not just code, but a masterpiece that is pleasant to look at, that is pleasant to work with at any stage of the project.</p>\n<p>If you just a little bit share my feelings we have something to talk about. The matter is that over some time something inside me began to hint that it’s a bad idea to refactor all code, everywhere and all the time. Understand me correctly – code should be good (even better when it’s ideal), but in real life it’s not reasonable to improve code instantly. I formed some rules about the refactori","link":"https://aakinshin.net/posts/refactoring/","owner":"Andrey Akinshin"}]