[{"title":"Compile FFmpeg for Android","description":"<p>When you have to manipulate audio or video on Android, being used to open-source\nsoftware, you have a single name which comes directly to you: FFmpeg. However,\nFFmpeg is a C software, meant to be used as an executable, and not officially\nsupporting Android.</p>\n\n<p>There are a lot of partial and/or out-of-date how-to out there on how to get\nFFmpeg running on Android, like\n<a href=\"https://github.com/halfninja/android-ffmpeg-x264\">halfninja&rsquo;s build</a>. However,\nI needed to use FFmpeg <code>concat</code> demuxer, introduced in FFmpeg 1.1. Most builds\ntarget 0.9. There&rsquo;s\n<a href=\"http://stackoverflow.com/search?q=ffmpeg+android\">a ton</a>\nof questions on StackOverflow about getting newer\nFFmpeg releases working on Android. So, here&rsquo;s a full explanation to get\n<a href=\"https://www.ffmpeg.org/releases/ffmpeg-2.2.3.tar.bz2\">FFmpeg 2.2.3 &ldquo;Muybridge&rdquo;</a>\nworking on Android. I&rsquo;ll describe the steps for Linux, but everything is pretty\nstandard shell and sh","link":"https://enoent.fr/posts/compile-ffmpeg-for-android/","owner":"Marc Plano-Lesay"},{"title":"Pitfalls With Closures In Go","description":"Introduction\nClosures in Go are a very powerful construct but they can also be the cause of bugs if you donâ€™t understand how they work. In this post I am going to pull a small piece of code from Chapter 2 from the Go In Action book that discusses a pitfall you can run into when using closures. The full code example can be found in the Github repository for the book.","link":"https://www.ardanlabs.com/blog/2014/06/pitfalls-with-closures-in-go.html","owner":"William Kennedy"}]