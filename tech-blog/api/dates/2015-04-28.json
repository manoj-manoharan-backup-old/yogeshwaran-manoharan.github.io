[{"title":"Be careful how you rsyslog","description":"Bandcamp was offline briefly yesterday due to what I like to call an unexpected single point of failure. Good systems design is all about addressing single points of failure, making sure you have redundancies in place, but sometimes you discover single points of failure that you didn’t realise you had. Yesterday’s problem was caused by […]","link":"https://bandcamptech.wordpress.com/2015/04/28/be-careful-how-you-rsyslog/","owner":"Bandcamp"},{"title":"No Excuses: Verifying RSpec Test Doubles","description":"<p>Tests which utilize external services or interact with the database are typically the culprits of long-running tests. We want to keep our tests quick. It is possible to mock/stub out long running database and/or external services calls. This reduces the time a test suite takes to execute.</p>\n\n<h2>Unsheathe the Double</h2>\n\n<p>In Ruby, one approach to mocking is by completely replacing the object of interest with a lightweight <a href=\"http://www.rubydoc.info/gems/rspec-mocks/frames#Test_Doubles\">double</a> using <a href=\"http://rspec.info/\">RSpec</a>. Proper usage of a <em>double</em> can prevent tests from interacting with external services, such as a database (i.e., <code>ActiveRecord</code>).</p>\n\n<p>With respect to RSpec, a <em>double</em> is created by providing a classname or object, along with a hash of messages and their responses. A <em>double</em> can only respond using the provided responses to their defined messages (technically there are other messages that a <em>doubl","link":"https://techblog.thescore.com/2015/04/28/no-excuses-verifying-rspec-test-doubles/","owner":"theScore"}]