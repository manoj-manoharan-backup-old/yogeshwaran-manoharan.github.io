[{"title":"Building Your First Link Resolver","description":"<p>This post is part 3 in an engineering blog series about building on top of the <a href=\"/blog/introducing-mixmax-sdk\">Mixmax SDK</a>. See <a href=\"/blog/introducing-mixmax-sdk\">part 1</a> and <a href=\"/blog/giphy-slash-command\">part 2</a>.</p>\n\n<p>If you're ever on Giphy.com and find an <a href=\"http://giphy.com/gifs/excited-the-office-yes-t3Mzdx0SA3Eis\" target=\"_blank\">awesome GIF</a> to put it in your email, you have to download the image to your computer and then upload it in to your email. But not with Mixmax - we believe in bringing the web to your email authoring experience. So in Mixmax when you paste the Giphy URL such as http://giphy.com/gifs/excited-the-office-yes-t3Mzdx0SA3Eis into your email, it'll be automatically replaced with the actual GIF. <a href=\"http://giphy.com/gifs/reaction-qJxFuXXWpkdEI\" target=\"_blank\">Magic</a>.</p>\n\n<p>At least that's how it should work. We first need to build it using the Mixmax SDK Link Resolver framework. Fortunately we've written some o","link":"https://mixmax.com/blog/giphy-link-resolver","owner":"Mixmax"},{"title":"How to Optimize Garbage Collection in Go","description":"When we shared a post a few weeks back about why we chose Go for CockroachDB, we received a number of questions about how we deal with some of Go&#x2019;s known issues, specifically those related to performance, garbage collection, and deadlocks.\nIn this post, we&#x2019;ll share a few powerful optimizations that mitigate many of the performance problems common to Go&#x2019;s garbage collection (we will cover &#x201C;fun with deadlocks&#x201D; in a follow-up).","link":"https://www.cockroachlabs.com/blog/how-to-optimize-garbage-collection-in-go/","owner":"CockroachDB"},{"title":"Using The Device Camera In Your NativeScript Mobile App","description":"\n                    <p>I’ve been doing a lot of <a href=\"https://www.nativescript.org/\">NativeScript</a> development lately because I’ve found it to be a pretty nifty platform. If you’re unfamiliar with NativeScript, it is similar to Ionic Framework and React Native in a sense that you can use JavaScript to build iOS and Android mobile applications. I previously wrote about using the <a href=\"https://www.thepolyglotdeveloper.com/2014/09/use-android-ios-camera-ionic-framework/\">native device camera in Ionic Framework</a> as well as using the <a href=\"https://www.thepolyglotdeveloper.com/2015/09/use-the-ios-camera-in-your-react-native-mobile-app/\">native device camera in React Native</a>. This time I figured it would be appropriate to do the same, but with Telerik NativeScript.</p>\n<p>In this guide we’re going to see what it takes to take pictures with the native device camera using NativeScript and display the pictures on the screen.</p>\n                    \n                        <p>","link":"https://www.thepolyglotdeveloper.com/2015/11/using-the-device-camera-in-your-nativescript-mobile-app/","owner":"Nic Raboy"}]