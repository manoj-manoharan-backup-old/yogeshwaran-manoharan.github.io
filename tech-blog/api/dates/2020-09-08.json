[{"title":"Android access ability","description":"In theory every app development process should allow the development team to create features that are accessible to all users.   When designers and developers create features, they usually first think about the user experience that is provided and how easy and intuitively that feature can be used. This usually accounts for a clear visual appearance...","link":"https://tech.justeattakeaway.com/2020/09/08/android-access-ability/","owner":"Just Eat"},{"title":"Beyond trivago Tech Pt.1: Side-Projects from Our Developers","description":"Fanatic learning is one of trivago&rsquo;s core values that forms a fundamental part of our engineering culture. It&rsquo;s very valuable to have curious minds around you that connect the dots to come up with new ideas and love to exchange knowledge on various topics. Since many of our engineers are involved in their own initiatives and projects outside work, we decided to introduce you to some of these side projects. The goal is to recognize their achievements and share their knowledge with our broader tech community.","link":"https://tech.trivago.com/2020/09/08/beyond-trivago-tech-pt.1-side-projects-from-our-developers/","owner":"Trivago"},{"title":"Installing windows","description":"Episode 34 will be delayed again — sorry! — because once again the time I had set aside for writing this weekend got consumed by a real-world task that could not wait. (I will try for Thursday of this week.) … ","link":"https://ericlippert.com/2020/09/08/installing-windows/","owner":"Eric Lippert"},{"title":"The Automated CIO","description":"\n\n<p>I previously wrote a bit about our internal infrastructure in my post on <a href=\"https://blog.jessfraz.com/post/the-art-of-automation/\">The\nArt of Automation</a>. This\npost is going to go into details about our automated Chief infrastructure\nOfficer (CIO). I joke so much that I automated our CIO that I even named the\nrepo holding the code&hellip; <a href=\"https://github.com/oxidecomputer/cio\">cio</a>.</p>\n\n<p>I took the time this weekend to finally clean up some of this code. Previously,\nour infrastructure was held together with bash, popsicle sticks, glue, and some\nrust. Now, it is mostly rust and a much more sane architecture to grok. We also\nget the freedom of caching all our data in a database that we own so we can\naccess it even when services are down. Previously, we called out to each\nservice&rsquo;s API for every script, bot, or whatever, which can get expensive, slow,\nand potentially be riddled with rate limits, or worse, downtime.</p>\n\n<p>Let me give you a diagram of wha","link":"https://blog.jessfraz.com/post/the-automated-cio/","owner":"Jessie Frazelle"},{"title":"To Update or Not to Update?","description":"<p>We build software on a huge stack of pre-existing software. This raises the question of when do we update those dependencies? The policy that emerges if you do nothing is that dependencies are updated when you have a clear need, such as requiring a feature that is only available in the latest version. Otherwise, you keep using the version of the operating system, libraries, and tools you installed when you first needed them. In my opinion, this is a bad policy. For projects actively being developed, I believe it is well worth the effort to use the latest stable release of your dependencies. This means you need to constantly spend some effort to stay up to date. However, I believe this <em>saves</em> effort in the long run, by avoiding bugs and reducing the total time spent applying updates. In the rest of this article, I will explain my position. As with most software engineering topics, I'm going to argue based on my own experience, and without any data.</p>\n\n\n<h2>Disadvantages of ","link":"https://www.evanjones.ca/to-update-or-not-update.html","owner":"Evan Jones"}]