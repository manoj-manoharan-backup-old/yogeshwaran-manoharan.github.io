[{"title":"A Neural Network Primer","description":"A primer that introduces fundamental concepts used in neural networks and deep learning.","link":"https://technology.condenast.com/story/a-neural-network-primer","owner":"Cond√© Nast"},{"title":"Handling CORS In A Golang Web Application","description":"\n                    <p>If you&rsquo;ve ever spent time building RESTful APIs, you&rsquo;ve probably come across cross-origin resource sharing (CORS) issues at some time or another. Often clients will receive errors when trying to interact with an API from a domain or port different from the actual API. Back in the day I had written a hacky article on <a href=\"https://www.thepolyglotdeveloper.com/2014/08/bypass-cors-errors-testing-apis-locally/\">getting past these CORS issues</a> by manipulating the browser settings. However, it is best to tackle these issues at the source.</p>\n<p>We&rsquo;re going to see how to change the cross-origin resource sharing configuration in a Golang web application that uses the <a href=\"https://github.com/gorilla/mux\">mux</a> package.</p>\n                    \n                        <p>The post <a rel='nofollow' href='https://www.thepolyglotdeveloper.com/2017/10/handling-cors-golang-web-application/'>Handling CORS In A Golang Web Application</a> appeared f","link":"https://www.thepolyglotdeveloper.com/2017/10/handling-cors-golang-web-application/","owner":"Nic Raboy"}]