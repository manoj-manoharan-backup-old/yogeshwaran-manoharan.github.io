[{"title":"Don’t force allocations on the callers of your API","description":"This is a post about performance. Most of the time when worrying about the performance of a piece of code the overwhelming advice should be (with apologies to Brendan Gregg) don’t worry about it, yet. However there is one area where I counsel developers to think about the performance implications of a design, and that","link":"https://dave.cheney.net/2019/09/05/dont-force-allocations-on-the-callers-of-your-api","owner":"Dave Cheney"},{"title":"How BuzzFeed’s Tech Team Helps Journalists Report On Technology With Authority","description":"","link":"https://tech.buzzfeed.com/tech-and-news-working-group-7dabaaa38e45?source=rss----140b2c7c3466---4","owner":"Buzzfeed"},{"title":"Join Ordering Part II: The 'SQL'","description":"Even in the 80&#x2019;s, before Facebook knew everything there was to know about us, we as an industry had vast reams of data we needed to be able to answer questions about. To deal with this, data analysts were starting to flex their JOIN muscles in increasingly creative ways. But back in that day and age, we had neither machine learning nor rooms full of underpaid Excel-proficient interns to save us from problems we didn&#x2019;t understand; we were on our own.","link":"https://www.cockroachlabs.com/blog/join-ordering-ii-the-ikkbz-algorithm/","owner":"CockroachDB"},{"title":"Quantified LIKE ANY predicates in jOOQ 3.12","description":"Quantified comparison predicates One of SQL’s weirdes features are quantified comparison predicates. I’ve hardly ever seen these in the wild: The above example is equivalent to using the much more readable IN predicate: This equivalence is defined in the SQL standard. There are more esoteric cases that could be solved using such quantified comparison predicates … ","link":"https://blog.jooq.org/2019/09/05/quantified-like-any-predicates-in-jooq-3-12/","owner":"jOOQ"}]