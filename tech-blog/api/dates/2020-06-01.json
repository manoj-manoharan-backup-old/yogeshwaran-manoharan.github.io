[{"title":"Django Test Splitting on Circle CI","description":"Django Test Splitting on Circle CI\r\n\r\nOne of the most important things you can do for your development teams' \r\nproductivity is to shorten the feedback loop during development. This \r\napplies to getting feedback from customers or stakeholders to ensure you're \r\nbuilding the right thing, as much as it does to testing the code you're \r\nwriting to ensure no bugs have crept into your change set.\r\n\r\nToday we're focusing on the Development - Test feedback loop. Developing a \r\nchange and running your regression test suite to validate that change \r\nshould be as fast as possible.\r\n\r\nWe've used three different systems to run our unit tests over the last few \r\nyears. Beginning with a self-hosted Jenkins instance, transitioning to \r\nTravis CI, and finally arriving at Circle CI.","link":"https://devblog.kogan.com/blog/django-test-splitting-on-circleci","owner":"Kogan.com"},{"title":"PG Bouncer And Ruby on Rails","description":"","link":"https://medium.com/engineering-housing/pg-bouncer-and-ruby-on-rails-8b8c027f45ba?source=rss----3a69e32e2594---4","owner":"Housing.com"},{"title":"Task Relevant Maturity (TRM) — The Search for Success","description":null,"link":"https://www.hostinger.com/blog/task-relevant-maturity/","owner":"Hostinger"},{"title":"Using ASCII waveforms to test hardware designs","description":"<p>At Jane Street, an <a href=\"https://blog.janestreet.com/testing-with-expectations\">“expect\ntest”</a> is a\ntest where you don’t manually write the output you’d like to check\nyour code against – instead, this output is captured automatically\nand inserted by a tool into the testing code itself. If further runs\nproduce different output, the test fails, and you’re presented with\nthe diff.</p>\n\n","link":"https://blog.janestreet.com/using-ascii-waveforms-to-test-hardware-designs/","owner":"Jane Street"}]