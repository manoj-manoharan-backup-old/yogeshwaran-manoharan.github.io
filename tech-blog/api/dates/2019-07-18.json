[{"title":"Efficient Go APIs with the mid-stack inliner","description":"A common task in Go API design is returning a byte slice. In this post I will explore some old techniques and a new one. In particular, we'll see how the mid-stack inliner interacts with escape analysis to make it possible for the most natural API to be also the fastest.","link":"https://blog.filippo.io/efficient-go-apis-with-the-inliner/","owner":"Filippo Valsorda"},{"title":"Garbage Collection In Go : Part III - GC Pacing","description":"Prelude This is the third post in a three part series that will provide an understanding of the mechanics and semantics behind the garbage collector in Go. This post focuses on how the GC paces itself.\nIndex of the three part series:\n1) Garbage Collection In Go : Part I - Semantics\n2) Garbage Collection In Go : Part II - GC Traces\n2) Garbage Collection In Go : Part III - GC Pacing","link":"https://www.ardanlabs.com/blog/2019/07/garbage-collection-in-go-part3-gcpacing.html","owner":"William Kennedy"},{"title":"Testcontainers","description":"\n<div class=\"paragraph\">\n<p>Recently I’ve found a very interesting project which allows to spin up docker containers for test\npurposes. Writing tests checking integration with external services is not an easy task. With\n<a href=\"https://www.testcontainers.org\">testcontainers</a> library it gets simpler because you can have external\nservice up and running just for your test in a couple of lines of code.</p>\n</div>\n<p><a href=\"https://blog.pchudzik.com/201907/testcontainers/\">Read more</a></p>","link":"https://blog.pchudzik.com/201907/testcontainers/","owner":"Paweł Chudzik"}]