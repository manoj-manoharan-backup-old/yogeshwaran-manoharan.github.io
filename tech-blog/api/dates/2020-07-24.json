[{"title":"The Jane Street Interview Process &mdash; 2020 Edition","description":"<p>We’re busy preparing for our software engineering <a href=\"https://blog.janestreet.com/unraveling/\">fall hiring\nseason</a>. Over the years we’ve\ndone our best to make our interview process more transparent to\ncandidates. While many candidates show up knowing something about what\nour interviews look like, much of the information floating around on\nthe internet is outdated or wrong. These past few months have also\nchanged a lot about the process as we’ve adapted to working from home\nand other effects of COVID-19.</p>\n\n","link":"https://blog.janestreet.com/jane-street-interview-process-2020/","owner":"Jane Street"},{"title":"The Simple Essence of Algebraic Subtyping: Principal Type Inference with Subtyping Made Easy","description":"<p ><a href=\"https://infoscience.epfl.ch/record/278576\">The Simple Essence of Algebraic Subtyping: Principal Type Inference with Subtyping Made Easy</a>, Lionel Parreaux, ICFP 2020.</p>\n<blockquote ><p >MLsub extends traditional Hindley-Milner type inference with subtyping while preserving compact principal types, an exciting new development. However, its specification in terms of biunification is difficult to understand, relying on the new concepts of bisubstitution and polar types, and making use of advanced notions from abstract algebra. In this paper, we show that these are in fact not essential to understanding the mechanisms at play in MLsub. We propose an alternative algorithm called Simple-sub, which can be implemented efficiently in under <a href=\"https://github.com/LPTK/simple-sub/tree/master/shared/src/main/scala/simplesub\">500 lines of code</a> (including parsing, simplification, and pretty-printing), looks more familiar, and is easier to understand.</p></blockquote>\n<p >Th","link":"http://lambda-the-ultimate.org/node/5597","owner":"Lambda the Ultimate"}]