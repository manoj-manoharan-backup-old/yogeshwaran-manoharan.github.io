[{"title":"Deep learning experiments in OCaml","description":"<p>Last year we held a machine learning seminar in our London office,\nwhich was an opportunity to reproduce some classical deep learning\nresults with a nice twist: we used OCaml as a programming language\nrather than Python. This allowed us to train models defined in a\nfunctional way in OCaml on a GPU using TensorFlow.</p>\n\n","link":"https://blog.janestreet.com/deep-learning-experiments-in-ocaml/","owner":"Jane Street"},{"title":"How Oscar Health Solves Complex Problems with Advanced Product Analytics","description":"New York-based health insurance provider Oscar Health is taking advantage of cutting-edge analysis in Periscope data to give consumers a truly optimized product experience.","link":"https://www.periscopedata.com/blog/how-oscar-health-solves-complex-problems-with-advanced-product-analytics","owner":"Periscope Data"},{"title":"Introducing HaloDB, a fast, embedded key-value storage engine written in Java","description":"<p><a href=\"https://yahoodevelopers.tumblr.com/post/178250134648/introducing-halodb-a-fast-embedded-key-value\" class=\"tumblr_blog\">yahoodevelopers</a>:</p><blockquote>\n<p>By Arjun Mannaly, Senior Software Engineer </p>\n<p>At <a href=\"https://www.oath.com/our-brands/\">Oath</a>, multiple ad platforms use a high throughput, low latency distributed key-value database that runs in data centers all over the world. The database stores billions of records and handles millions of read and write requests per second at millisecond latencies. The data we have in this database must be persistent, and the working set is larger than what we can fit in memory. Therefore, a key component of the database performance is a fast storage engine. Our current solution had served us well, but it was primarily designed for a read-heavy workload and its write throughput started to be a bottleneck as write traffic increased. </p>\n<p>There were other additional concerns as well; it took hours to repair a corrupted","link":"https://yahooeng.tumblr.com/post/178262468576","owner":"Yahoo"},{"title":"Profiling Django views with Scooby profiler","description":"\n<p>Earlier in 2016, I came up with the idea of creating a Python module which could provide functionality of profiling\nfunctions w.r.t. SQL queries and tell exactly at what lines of function, the queries were happening.\nI called that package <strong>Goofy</strong> and created it with the engineering of Python AST manipulation.\nYou can read the post on it <a href=\"/2016/02/01/profiling-django-views/\">here</a> later.\nIt helped us profiling views serving AJAX requests but it had some limitations too. E.g. we\ncouldn’t see the whole callstack trace of the queries and couldn’t analyze the\nqueries.</p>\n\n<p>In an internal hackathon @HackerEarth which happened in Nov 2017, I revisited this problem\nand tried to come up with a profiler, through which we could see the stats on\nfront-end and which should be much lightweight and would work with AJAX requests.\nI named this package <strong>Scooby</strong>.</p>\n\n<h2 id=\"idea\">Idea</h2>\n\n<p>We have been using the package <strong>django-debug-toolbar</s","link":"http://engineering.hackerearth.com/2018/09/20/profiling-django-views-with-scooby/","owner":"HackerEarth"}]