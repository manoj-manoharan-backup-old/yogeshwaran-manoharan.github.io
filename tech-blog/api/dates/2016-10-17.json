[{"title":"Hello World","description":"\n<p>First post. It must be Hello world.</p>\n<p>I&rsquo;m going to try and start posting something regularly.</p>\n<p>I&rsquo;m Java and javascript so it&rsquo;s probably will be the main topic of this blog. Sometimes I will try\nto write something more generic and not language specific.</p>\n<p><a href=\"https://blog.pchudzik.com/201610/hello-world/\">Read more</a></p>","link":"https://blog.pchudzik.com/201610/hello-world/","owner":"Paweł Chudzik"},{"title":"How do Native Extensions Manage Memory? Part 2: JavaScript (V8)","description":"<style type=\"text/css\">\n.diagram {\n  width: 439\n  height: 221\n}\n</style>\n\n<p>This article is the second part in a series.  In this\narticle we look at the V8 VM for JavaScript and explore the\nmemory-management APIs it offers to native C++ extensions.</p>\n\n<p>The other articles in the series are:</p>\n\n<ul>\n  <li><a href=\"http://blog.reverberate.org/2016/06/12/native-extensions-memory-management-part1-ruby-mri.html\">Part 1: Ruby (MRI)</a>\n(also contains a high-level introduction to the problem).</li>\n  <li><a href=\"http://blog.reverberate.org/2016/09/26/native-extensions-memory-management-part2-javascript-v8.html\">Part 2: JavaScript (V8)</a> (this article)</li>\n</ul>\n\n<h1 id=\"representing-javascript-objects-in-c\">Representing JavaScript objects in C++</h1>\n\n<p>Let’s start by exploring how objects are represented in the\nV8 native extension API.  The V8 API is written in C++.  To\nrefer to a JavaScript object from C++, you use a special\nkind of C++ object called a <em>handle</em>.  There are","link":"https://blog.reverberate.org/2016/10/17/native-extensions-memory-management-part2-javascript-v8.html","owner":"Josh Haberman"},{"title":"Native Support for Websockets on AWS","description":"<p>Mixmax started out as a monolithic Meteor application hosted on Modulus.io. As our traffic and\nuser base grew we ran into problems with both Meteor itself and our hosting provider,\nprompting us to factor subsystems into <a href=\"/blog/scaling-mixmax-monolithic-to-microservices\">their own microservices</a>\nand move those services <a href=\"/blog/migrating-production-services-to-aws-elastic-beanstalk-without-downtime\">to AWS Elastic Beanstalk</a>.\nThis reduced our costs and gave us better operational control. In particular, it let us lock down our\nservices at the network level, using an AWS <a href=\"https://aws.amazon.com/vpc/\">VPC</a>.</p>\n<p>Our Meteor application, however, remained outside Elastic Beanstalk. This left our architecture\nvulnerable, as any resource needed by the Meteor app (databases, other services) had to be exposed\noutside the VPC. But Meteor relies on websockets, which AWS did not natively support&mdash;until now,\nwith the advent of the\n<a href=\"https://aws.amazon.","link":"https://mixmax.com/blog/deploying-meteor-to-elastic-beanstalk-1","owner":"Mixmax"},{"title":"Passing Complex Data Through The Angular Router With NativeScript","description":"\n                    <p>I recently wrote a tutorial for <a href=\"https://www.thepolyglotdeveloper.com/2016/10/navigating-nativescript-app-angular-2-router/\">navigating a NativeScript Angular application</a> using the Angular Router. In this tutorial I demonstrated how to create a multiple page application, navigate between pages, and even pass simple string parameters between the pages during navigation. However, what happens when the data you need to pass isn’t so simple?</p>\n<p>We’re going to take a look at some of the ways to pass data between routes in a NativeScript application that makes use of Angular.</p>\n                    \n                        <p>The post <a rel='nofollow' href='https://www.thepolyglotdeveloper.com/2016/10/passing-complex-data-angular-2-router-nativescript/'>Passing Complex Data Through The Angular Router With NativeScript</a> appeared first on <a rel='nofollow' href='https://www.thepolyglotdeveloper.com'>The Polyglot Developer</a>.</p>\n                  ","link":"https://www.thepolyglotdeveloper.com/2016/10/passing-complex-data-angular-2-router-nativescript/","owner":"Nic Raboy"}]