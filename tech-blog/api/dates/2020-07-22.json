[{"title":"Chipping Away at a Monolith","description":"My team's journey toward unbundling our part of Gusto’s monolithic Ruby on Rails app.","link":"https://engineering.gusto.com/chipping-away-at-a-monolith/","owner":"Gusto"},{"title":"Could we Have a Language That Hides Collections From Us?","description":"I just fixed a bug. The fix required me to initialise an Object[] array with the init values for each type, instead of just null, i.e. false for boolean, 0 for int, 0.0 for double, etc. So, instead of just doing: I needed: For the subjective 8E17th time, I wrote a loop. A loop that … ","link":"https://blog.jooq.org/2020/07/22/could-we-have-a-language-that-hides-collections-from-us/","owner":"jOOQ"},{"title":"Ground Control to Major TOML: Why Buildpacks Use a Most Peculiar Format","description":"<p>YAML files dominate configuration in the cloud native ecosystem. They’re used by Kuberentes, Helm, Tekton, and many other projects to define custom configuration and workflows. But YAML has its oddities, which is why the Cloud Native Buildpacks project chose TOML as its primary configuration format.</p>\n\n<p>TOML is a minimal configuration file format that's easy to read because of its simple semantics. You can learn more about TOML from the <a href=\"https://toml.io/en/\">official documentation</a>, but a simple buildpack TOML file looks like this:</p>\n\n<!-- more -->\n\n<pre><code class=\"lang-toml\">api = \"0.2\"\n\n[buildpack]\nid = \"heroku/maven\"\nversion = \"1.0\"\nname = \"Maven\"\n</code></pre>\n\n<p>Unlike YAML, TOML doesn’t rely on significant whitespace with difficult to read indentation. TOML is designed to be human readable, which is why it favors simple structures. It’s also easy for machines to read and write; you can even append to a TOML file without reading it first, which makes it a gr","link":"https://blog.heroku.com/why-buildpacks-use-toml","owner":"Heroku"}]