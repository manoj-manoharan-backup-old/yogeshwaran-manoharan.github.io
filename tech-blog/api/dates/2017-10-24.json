[{"title":"Consume Remote API Data Via HTTP In A Vue.js Web Application","description":"\n                    <p>When building a modern web application, chances are that you&rsquo;ll need to consume data from some remote resource, whether it be one that you&rsquo;ve built or something someone else built. Sending HTTP requests is one of the more popular ways to send data from client facing applications to RESTful API backends.</p>\n<p>We&rsquo;re going to see how to send HTTP requests within a <a href=\"https://vuejs.org/\">Vue.js</a> web application, using a variety of techniques such as those found in the popular <a href=\"https://github.com/axios/axios\">axios</a> and <a href=\"https://github.com/pagekit/vue-resource\">vue-resource</a> libraries.</p>\n                    \n                        <p>The post <a rel='nofollow' href='https://www.thepolyglotdeveloper.com/2017/10/consume-api-data-http-vuejs-web-application/'>Consume Remote API Data Via HTTP In A Vue.js Web Application</a> appeared first on <a rel='nofollow' href='https://www.thepolyglotdeveloper.com'>The Polyglot Dev","link":"https://www.thepolyglotdeveloper.com/2017/10/consume-api-data-http-vuejs-web-application/","owner":"Nic Raboy"},{"title":"Live Video Transmuxing/Transcoding: FFmpeg vs TwitchTranscoder, Part II","description":"","link":"https://medium.com/twitch-news/live-video-transmuxing-transcoding-ffmpeg-vs-twitchtranscoder-part-ii-4973f475f8a3?source=rss----3ae745429979--engineering","owner":"Twitch"},{"title":"Migrating Mountains of Mongo Data","description":"","link":"https://medium.com/build-addepar/migrating-mountains-of-mongo-data-63e530539952?source=rss----596e43e5e150---4","owner":"Addepar"},{"title":"Property Testing Like AFL","description":"In my last last post, I argued that property-based testing and fuzzing are essentially the same practice, or at least share a lot of commonality. In this followup post, I want to explore that idea a bit more: I&rsquo;ll first detour into some of my frustrations and hesitations around typical property-based testing tools, and then propose a hypothetical UX to resolve these concerns, which takes heavy inspiration from modern fuzzing tools, specifically the AFL and Google&rsquo;s OSS-Fuzz.","link":"https://blog.nelhage.com/post/property-testing-like-afl/","owner":"Nelson Elhage"},{"title":"The Behavior Of Channels","description":"Introduction When I started to work with Go’s channels for the first time, I made the mistake of thinking about channels as a data structure. I saw channels as a queue that provided automatic synchronized access between goroutines. This structural understanding caused me to write a lot of bad and complicated concurrent code.\nI learned over time that it’s best to forget about how channels are structured and focus on how they behave.","link":"https://www.ardanlabs.com/blog/2017/10/the-behavior-of-channels.html","owner":"William Kennedy"},{"title":"The sad state of Linux socket blancing","description":"","link":"https://idea.popcount.org/2017-10-24-the-sad-state-of-linux-socket-blancing","owner":"Marek Majkowski"}]