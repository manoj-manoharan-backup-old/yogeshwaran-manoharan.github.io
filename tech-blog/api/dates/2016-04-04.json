[{"title":"A layout trick","description":"Few weeks ago, we did a redesign of our product - VWO. It wasn't a complete overhaul from scratch, but some major design decisions were…","link":"https://engineering.wingify.com//posts/layout-trick/","owner":"Wingify"},{"title":"Building a foundation for data at Condé Nast","description":"Building a foundation for data at Condé Nast","link":"https://technology.condenast.com/story/building-a-data-foundation","owner":"Condé Nast"},{"title":"LegacyJIT-x86 and first method call","description":"<p>Today I tell you about one of my favorite benchmarks (this method doesn&rsquo;t return a useful value, we need it only as an example):</p>\n<div class=\"highlight\"><pre class=\"chroma\"><code class=\"language-cs\" data-lang=\"cs\"><span class=\"na\">[Benchmark]</span>\n<span class=\"k\">public</span> <span class=\"kt\">string</span> <span class=\"n\">Sum</span><span class=\"p\">()</span>\n<span class=\"p\">{</span>\n<span class=\"kt\">double</span> <span class=\"n\">a</span> <span class=\"p\">=</span> <span class=\"m\">1</span><span class=\"p\">,</span> <span class=\"n\">b</span> <span class=\"p\">=</span> <span class=\"m\">1</span><span class=\"p\">;</span>\n<span class=\"kt\">var</span> <span class=\"n\">sw</span> <span class=\"p\">=</span> <span class=\"k\">new</span> <span class=\"n\">Stopwatch</span><span class=\"p\">();</span>\n<span class=\"k\">for</span> <span class=\"p\">(</span><span class=\"kt\">int</span> <span class=\"n\">i</span> <span class=\"p\">=</span> <span class=\"m\">0</span><span class=\"p\">;</span> <span class=\"n\">i</span> <sp","link":"https://aakinshin.net/posts/legacyjitx86-and-first-method-call/","owner":"Andrey Akinshin"},{"title":"UITableView & UICollectionView: Killing stringly typed cells with Swift","description":"<p>UITableView &amp; UICollectionView are the bread and butter of many iOS applications. However, dequeuing cells with string identifiers can result in brittle code that doesn&#39;t scale as table complexity increases.  We&#39;re going to look at using Swift&#39;s type system to get rid of the ad-hoc typing we get from using string identifiers and eliminate the need for type casts in the process.</p>\n\n<h2>Introduction</h2>\n\n<p>It&#39;s helpful to look at the original context in which an API was used in order to understand the problems it solves. To many of us the following code will be all too familiar.</p>\n<div class=\"highlight\"><pre><code class=\"language-objective-c\" data-lang=\"objective-c\"><span class=\"p\">-</span> <span class=\"p\">(</span><span class=\"bp\">UITableViewCell</span> <span class=\"o\">*</span><span class=\"p\">)</span><span class=\"nf\">tableView:</span><span class=\"p\">(</span><span class=\"bp\">UITableView</span> <span class=\"o\">*</span><span class=\"p\">)</span><span class=\"nv\">ta","link":"https://techblog.thescore.com/2016/04/04/typed-uitableview-uicollectionview-dequeuing-in-swift/","owner":"theScore"},{"title":"Unit Testing In A Telerik NativeScript Mobile App","description":"\n                    <p>Unit testing! It’s something that we as developers all understand the importance of and implement in every project, right?</p>\n<p><strong>cough</strong></p>\n<p>Anyway… did you know NativeScript supports unit testing out of the box? It’s true!</p>\n<p>By unit testing your application, you can ensure that any changes you’ve made to your code are working properly and that they haven’t broken any previous code. You could also integrate it into your <a href=\"https://therankamateur.co.uk/continuous-integration-and-nativescript-68c78cb89ff#.vt6ag846z\">Continuous Integration</a> process and automate the running of your tests on a regular basis, or on each code check in!</p>\n                    \n                        <p>The post <a rel='nofollow' href='https://www.thepolyglotdeveloper.com/2016/04/unit-testing-in-telerik-nativescript-mobile-app/'>Unit Testing In A Telerik NativeScript Mobile App</a> appeared first on <a rel='nofollow' href='https://www.thepolyglotdevelop","link":"https://www.thepolyglotdeveloper.com/2016/04/unit-testing-in-telerik-nativescript-mobile-app/","owner":"Nic Raboy"}]