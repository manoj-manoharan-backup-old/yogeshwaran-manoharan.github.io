[{"title":"CPU Registers and OCaml","description":"<p>Even though registers are a low-level CPU concept, having some knowledge about\nthem can help write faster code. Simply put, a CPU register is a storage for a\nsingle variable. CPU can keep data in memory or cache or in registers and\nregisters are often much faster. Furthermore, some operations are possible only\nwhen the data is in registers. Hence, the OCaml compiler tries to keep as many\nvariables as it can in the registers.</p>\n\n","link":"https://blog.janestreet.com/cpu-registers-and-ocaml-2/","owner":"Jane Street"},{"title":"Q-Directives - A Faster Directive System For Angular.js","description":"Performance matters, and an Angular.js developer would especially know it. Several watchers in a digest cycle can often be a bottleneck, and…","link":"https://engineering.wingify.com//posts/q-directives/","owner":"Wingify"},{"title":"Scaling Mixmax: Front-end performance","description":"<p>This is the next post in <a href=\"/\" target=\"_blank\">a series</a> on how we scaled Mixmax from a successful prototype to a platform that scales to many thousands of users. In this post, I’ll describe some of the front-end performance bottlenecks we experienced while using the Meteor framework and why we had to move one part of our app off it.</p>\n\n<p class=\"poet-read-more\"><a href=\"/blog/scaling-mixmax-front-end\" title=\"Read more of Scaling Mixmax: Front-end performance\">Continue reading</a></p>","link":"https://mixmax.com/blog/scaling-mixmax-front-end","owner":"Mixmax"}]