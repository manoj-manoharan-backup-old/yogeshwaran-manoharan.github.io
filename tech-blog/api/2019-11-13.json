[{"title":"Checking for Unchecked Errors within Golang Applications","description":"\n                    <p>When it comes to error handling in the Go programming language (Golang), they can either be incredible or a miserable nightmare in terms of management. You can choose to embrace them and check if they are nil every opportunity that you have, or you can ignore them with an underscore. However, what happens in those circumstances where you didn&rsquo;t even know the function returned something?</p>\n<p>Regardless of the story, checking for errors is a good thing, even if you hate doing it. In this tutorial we&rsquo;re going to see how to scan your code for missed opportunities when it comes to error checking using a nifty open source tool.</p>\n                    \n                        <p>The post <a rel='nofollow' href='https://www.thepolyglotdeveloper.com/2019/11/checking-for-unchecked-errors-within-golang-applications/'>Checking for Unchecked Errors within Golang Applications</a> appeared first on <a rel='nofollow' href='https://www.thepolyglotdeveloper.com'>T","link":"https://www.thepolyglotdeveloper.com/2019/11/checking-for-unchecked-errors-within-golang-applications/","owner":"Nelson Elhage"},{"title":"Stop Mapping Stuff in Your Middleware. Use SQL’s XML or JSON Operators Instead","description":"It’s been a while since I’ve ranted on this blog, but I was recently challenged by a reddit thread to write about this topic, so here goes… So, you’re writing a service that produces some JSON from your database model. What do you need? Let’s see: Read a book on DDD Read another book on … ","link":"https://blog.jooq.org/2019/11/13/stop-mapping-stuff-in-your-middleware-use-sqls-xml-or-json-operators-instead/","owner":"IPFS"},{"title":"The architecture of declarative configuration management","description":"With the ongoing move towards “infrastructure-as-code” and similar notions, there’s been an ongoing increase in the number and popularity of declarative configuration management tools. This post attempts to lay out my mental model of the conceptual architecture and internal layering of such tools, and some wishes I have for how they might work differently, based on this model.\nBackground: declarative configuration management Declarative configuration management refers to the class of tools that allow operators to declare a desired state of some system (be it a physical machine, an EC2 VPC, an entire Google Cloud account, or anything else), and then allow the system to automatically compare that desired state to the present state, and then automatically update the managed system to match the declared state.","link":"https://blog.nelhage.com/post/declarative-configuration-management/","owner":"Natasha Murashev"}]