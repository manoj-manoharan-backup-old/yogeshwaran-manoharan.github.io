[{"title":"Benchmarking JSON Generation in Ruby","description":"<p>At theScore, we have a big JSON API with hundreds of end-points that expose\nsports data. Since sports data is very rich, the JSON representation of most\nof the resources on our API tend to be complex. As a result, a lot of time is\nspent on generating JSON in our Rails application.</p>\n\n<p>At the time we wrote the API, <a href=\"https://github.com/nesquena/rabl\">RABL</a> was a\ngreat choice. When <a href=\"https://github.com/rails-api/active_model_serializers\">ActiveModel Serializers</a>\ncame out with an object-oriented approach to generating JSON, we were excited.\nWe tried it out, and ended up with something that is more maintainable than\nthe RABL counterparts.</p>\n\n<p>But, migrating the entire JSON generation code from RABL to ActiveModel\nSerializers (AMS) would require massive effort. Since RABL is still\nrelatively easy to use and maintain, more ease of use and maintenance\naspects of AMS is not a good enough reason to do the migration. On the\nother hand, if we can significantly incre","link":"https://techblog.thescore.com/2014/05/23/benchmarking-json-generation-in-ruby/","owner":"theScore"}]