[{"title":"Index selection in CockroachDB","description":"In an earlier post we discussed how CockroachDB maps SQL table data and table indexes to key-value storage. In this post, we will go over some of the factors involved in choosing the best index to use for running a certain query.\nIntroduction to indexes Tables are internally organized according to a certain column (or group of columns); this makes searching for rows according to values in that column or column group very efficient, even if the table contains a large number of rows.","link":"https://www.cockroachlabs.com/blog/index-selection-cockroachdb-2/","owner":"Cloudflare"},{"title":"Playing With React and D3","description":"<p>D3 is great at data visualizations, but it manipulates the DOM directly to display that data. Rendering DOM elements is where React shines. It uses a virtual representation of the DOM (virtual DOM) and a super performant diffing algorithm in order to determine the fastest way to update the DOM. We want to leverage React’s highly efficient, declarative, and reusable components with D3’s data utility functions.</p>\n\n<!--more-->\n\n<p>At this point, we can safely say that  <a href=\"https://facebook.github.io/react/\">React</a> is the preferred JavaScript library for building user interfaces. It is used practically everywhere and is almost as pervasive as <a href=\"https://jquery.com/\">jQuery</a>. It has an API that is simple, powerful, and easy to learn. Its performance metrics are really impressive thanks to the Virtual DOM and its clever <a href=\"https://facebook.github.io/react/docs/reconciliation.html\">diff algorithm</a> between state changes. Nothing, however, is perfect, and React to","link":"https://reactjsnews.com/playing-with-react-and-d3","owner":"Raymond Hettinger"}]