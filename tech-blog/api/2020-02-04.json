[{"title":"Accessibility @ Nextdoor","description":"","link":"https://engblog.nextdoor.com/accessibility-nextdoor-4f1375bf5240?source=rss----5e54f11cdfdf---4","owner":"New York Times"},{"title":"Balancing the Books at Scale","description":"<p>As a payment processing company, reconciliation, or making sure all of our payments add up, is one of WePay’s foremost concerns. We need to know where all the money is, all the time. This is more easily said than done; we process billions of dollars each year, in hundreds of different flows. To make matters more complicated, as WePay grows and offers new products, not only do we have to deal with the payments we process, but also with new integration methods that skip our internal payments-engine entirely. For example, some of our customers register through WePay, but process all of their payments directly through Chase.</p>\n\n<p>It’s relatively easy to track most of our internal flows, but with multiple downstream payment-processors, batch files from banks, settlement files, and numerous other data-sources, keeping the books balanced becomes a nontrivial problem. In order to keep offering new products and flows, we need a flexible, maintainable, and reliable daily reconciliation sys","link":"https://wecode.wepay.com/posts/balancing-the-books-at-scale","owner":"Wemake.services"},{"title":"Docker Images : Part I - Reducing Image Size","description":"Series Index Reducing Image Size\nDetails Specific To Different Languages\nGoing Farther To Reduce Image Size\nIntroduction When getting started with containers, it&rsquo;s pretty easy to be shocked by the size of the images that we build. We&rsquo;re going to review a number of techniques to reduce image size, without sacrificing developers&rsquo; and ops&rsquo; convenience. In this first part, we will talk about multi-stage builds, because that&rsquo;s where anyone should start if they want to reduce the size of their images.","link":"https://www.ardanlabs.com/blog/2020/02/docker-images-part1-reducing-image-size.html","owner":"Wilfred Hughes"},{"title":"Leveraging AWS “spot” instances to drive down costs","description":null,"link":"https://www.eventbrite.com/engineering/leveraging-spot-instances-to-drive-down-costs/","owner":"Etsy"},{"title":"Taming data transfer costs with Elasticsearch","description":"<p>Here we outline how an upgrade to open source search and analytics engine, Elasticsearch, led to unexpected cost-savings</p><p>Recently, we decided to upgrade the Elasticsearch cluster powering the Content API. Elastic had released version 7.1, which is where we wanted to be. At the same time, Elastic <a href=\"https://www.elastic.co/guide/en/elasticsearch/client/java-api/current/java-api.html\">deprecated the Java client</a> we were using to talk to Elasticsearch. We had several options before us: use the low-level REST client, the high-level REST client or switch to a Scala-based library like Elastic4s. None of these options were entirely satisfactory, but we eventually chose to go with the high-level client which was designed to be very close to the Java client. Indeed, the amount of work needed was quite small and, credit where credit is due, well-documented by the Elastic team.</p><p>After a perfect roll-out, we noticed a substantial spike in our data transfer costs, and it was i","link":"https://www.theguardian.com/info/2020/feb/04/taming-data-transfer-costs-with-elasticsearch","owner":"Groupon"}]