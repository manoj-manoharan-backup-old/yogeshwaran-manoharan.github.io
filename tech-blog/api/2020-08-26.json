[{"title":"Use Matter.js Physics for Sprite Collisions in a Phaser Game","description":"\n                    <p>I recently wrote about handling collisions in a Phaser 3.x game. In this previous tutorial titled, <a href=\"https://www.thepolyglotdeveloper.com/2020/08/handle-collisions-between-sprites-phaser-arcade-physics/\">Handle Collisions Between Sprites in Phaser with Arcade Physics</a>, the focus was around the arcade physics engine that Phaser integrates with.</p>\n<p>While you should use the arcade physics engine whenever possible, due to its speed and efficiency, sometimes working with box and circle physics bodies isn&rsquo;t enough.</p>\n<p>This is where <a href=\"https://brm.io/matter-js/\">Matter.js</a> comes in!</p>\n<p>Matter.js is another supported physics engine in Phaser 3.x and while it offers quite a bit of functionality that arcade physics doesn&rsquo;t offer, it also offers custom polygon physics bodies.</p>\n<p>In this tutorial, we&rsquo;re going to explore collisions once more in a <a href=\"http://phaser.io/\">Phaser</a> game, but this time with Matter.js and","link":"https://www.thepolyglotdeveloper.com/2020/08/use-matterjs-physics-sprite-collisions-phaser-game/","owner":"Nic Raboy"}]