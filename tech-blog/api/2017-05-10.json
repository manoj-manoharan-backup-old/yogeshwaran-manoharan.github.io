[{"title":"CockroachDB 1.0 is Production-Ready","description":"Today, we are pleased to announce the release of CockroachDB 1.0, the first open source, cloud-native SQL database. We&#x2019;re also announcing a series B fundraise from investors who share our vision. The launch of 1.0 marks our graduation from beta to a production-ready database, designed to power business at any scale from the startup to the enterprise.\nA brief introduction is in order. While databases aren&#x2019;t generally considered the most thrilling subject in technology news, ignoring them would be a mistake.","link":"https://www.cockroachlabs.com/blog/cockroachdb-1-0-release/","owner":"CockroachDB"},{"title":"Design Philosophy On Logging","description":"Prelude This post is part of a series designed to make you think about your own design philosophy on different topics. If you haven’t read the following post yet, please do so first:\nDevelop Your Design Philosophy\nIntroduction Systems cannot be developed assuming that human beings will be able to write millions of lines of code without making mistakes, and debugging alone is not an efficient way to develop reliable systems.","link":"https://www.ardanlabs.com/blog/2017/05/design-philosophy-on-logging.html","owner":"William Kennedy"},{"title":"Implement 2FA With Time-Based One-Time Passwords In A Node.js API","description":"\n                    <p>Not too long ago I wrote about <a href=\"https://www.thepolyglotdeveloper.com/2017/03/jwt-authentication-in-a-node-js-powered-api/\">authenticating within a Node.js API using Json Web Tokens</a> (JWT). The basis of the example is around authenticating via a username and password and receiving a JWT for every future request against the API. While that example is incredibly useful and follows best practice, it doesn’t cover the scenario where you’d like to have a two-factor authentication (2FA) option for your users. In case you’re unfamiliar, 2FA is a second layer of protection for accounts made possible by a time-based token generated by a shared secret key.</p>\n<p>We’re going to see how to add a two-factor authentication option to our Node.js API while continuing to use Json Web Tokens.</p>\n                    \n                        <p>The post <a rel='nofollow' href='https://www.thepolyglotdeveloper.com/2017/05/implement-2fa-time-based-one-time-passwords-node-","link":"https://www.thepolyglotdeveloper.com/2017/05/implement-2fa-time-based-one-time-passwords-node-js-api/","owner":"Nic Raboy"}]