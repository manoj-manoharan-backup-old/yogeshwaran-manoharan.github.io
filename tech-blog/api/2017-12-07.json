[{"title":"CleverTap Engineering – Behavioral Messaging at 100B Scale","description":null,"link":"https://clevertap.com/blog/clevertap-engineering-behavioral-messaging-at-scale/","owner":"CleverTap"},{"title":"Control your release","description":"\n<div class=\"paragraph\">\n<p>Imagine the situation when you&#8217;ve just released something on production and deployment went fine.\nYou&#8217;ve just sent release notes and went out to grab a coffee. Once you are back you see an email\nwith information that feature team have been working on for past 3 sprints doesn&#8217;t work at all.\nTurns out you forgot to change something in production server configuration. In this post, I&#8217;m going\nto present the simplest idea which will help you to avoid this kind of issues.</p>\n</div>\n<p><a href=\"https://blog.pchudzik.com/201712/checklist-txt/\">Read more</a></p>","link":"https://blog.pchudzik.com/201712/checklist-txt/","owner":"Paweł Chudzik"},{"title":"How SoundCloud Uses HAProxy with Kubernetes for User-Facing Traffic","description":"A little less than two years ago, SoundCloud began the journey of replacing our homegrown deployment platform, Bazooka, with Kubernetes. Kubernetes automates deployment, scaling, and management of containerized applications.","link":"https://developers.soundcloud.com/blog/how-soundcloud-uses-haproxy-with-kubernetes-for-user-facing-traffic","owner":"Soundcloud"},{"title":"How to Improve IoT Application Performance with Multi-Row DML","description":"Internet of Things (IoT) and microservices-style applications need a database that can handle requirements such as fluctuating number of client connections, unpredictable workloads, and bursty throughputs. Traditional single-node databases handle these requirements by reducing latency to improve throughput. However, for modern distributed databases such as CockroachDB, the optimal approach to handle these requirements is to use multi-row SQL Data Manipulation Language (DML) and parallel processing.\nMulti-row DMLs provide an order-of-magnitude improvement in throughput performance as compared with equivalent single-row DMLs, which is why databases such as Oracle, MySQL, and Postgres widely support multi-row DMLs.","link":"https://www.cockroachlabs.com/blog/multi-row-dml/","owner":"CockroachDB"},{"title":"Manually Setup NativeScript Without Use Of Provided Scripts","description":"\n                    <p>NativeScript is great. There is an easy setup process (at least for Windows, I unfortunately don&rsquo;t have a Mac so I can&rsquo;t speak on the MacOS side of things) that provides an executable that helps you through all the steps of setup. Unfortunately, like any automated setup process, things can go awry and stop your excitement on starting on your native apps with some errors that have little suggestion on how to move forward.  This guide will help you go through the steps to install and use NativeScript manually, so whether you&rsquo;re having difficulties with the simple setup, or want to customize a few things along the way, you&rsquo;re ready to rock and roll.</p>\n                    \n                        <p>The post <a rel='nofollow' href='https://www.thepolyglotdeveloper.com/2017/12/manually-setup-nativescript-without-provided-scripts/'>Manually Setup NativeScript Without Use Of Provided Scripts</a> appeared first on <a rel='nofollow' href='https:","link":"https://www.thepolyglotdeveloper.com/2017/12/manually-setup-nativescript-without-provided-scripts/","owner":"Nic Raboy"},{"title":"Precisely observing structural page changes","description":"<p><em>This blog post is part of the\n<a href=\"/blog/mixmax-eng-advent-2017\">Mixmax 2017 Advent Calendar</a>. The previous post on\nDecember 6th was about\n<a href=\"/blog/database-backed-job\">Database-backed job processing</a>.</em></p>\n<p>Mixmax is built on Gmail. Our product, and its convenience and power, depends on tight\nuser-interface integration with Gmail. In order to add features to Gmail for our users, we need to\ntrack the structure of Gmail’s [DOM] and be able to manipulate it. For years, we achieved this by\ncrafting query selectors to identify important elements within Gmail’s DOM, and continuously\nre-applying these selectors as the page changed. </p>\n<p class=\"poet-read-more\"><a href=\"/blog/precisely-observing-structural-page-changes\" title=\"Read more of Precisely observing structural page changes\">Continue reading</a></p>","link":"https://mixmax.com/blog/precisely-observing-structural-page-changes","owner":"Mixmax"}]