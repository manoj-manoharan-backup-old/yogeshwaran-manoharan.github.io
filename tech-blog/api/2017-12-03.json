[{"title":"Handling 3rd-party JavaScript with Rollup","description":"<p><em>This blog post is part of the <a href=\"/blog/mixmax-eng-advent-2017\">Mixmax 2017 Advent Calendar</a>.\nThe previous post on December 2nd was about <a href=\"/blog/sdk-sequence-picker\">Mixmax’s new Sequence Picker SDK</a>.</em></p>\n<p>As of this writing, Mixmax has open-sourced <a href=\"https://www.npmjs.com/org/mixmaxhq\">dozens</a> of packages\nin our primary language, JavaScript. The linchpin of our\n<a href=\"/blog/mixmax-eng-advent-2016\">open-source strategy</a> is npm, where we publish\npackages for both Node.js and, increasingly, the browser\n(<a href=\"/blog/backbone-to-react-without-rewriting\">hello React components!</a>). Our\nbundler of choice, <a href=\"https://rollupjs.org/\">Rollup</a>, makes it super easy to consume those packages\nclient-side. But if you don&#39;t take care when configuring Rollup, you can end up publishing hundreds\nof kilobytes of unnecessary JavaScript to your users. </p>\n<p class=\"poet-read-more\"><a href=\"/blog/rollup-externals\" title=\"Read more of Handling","link":"https://mixmax.com/blog/rollup-externals","owner":"Microsoft Python Engineering"},{"title":"My dotJS 2017 Keynote","description":"Yesterday in Paris, I gave the closing keynote at the dotJS conference. I’ve had the privilege to speak at dotJS every other year since 2013. Click above for a PDF of my slides (sorry, I used Keynote for several reasons, and its generated HTML is huge and not likely to work well with WP). Long-timer … ","link":"https://brendaneich.com/2017/12/my-dotjs-2017-keynote/","owner":"Brandon Rhodes"}]