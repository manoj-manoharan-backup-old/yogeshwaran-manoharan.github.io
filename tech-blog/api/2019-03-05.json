[{"title":"GIPHY’s AI Can Identify Lil’ Yachty, Can Yours?","description":"GIPHY is excited to announce the public availability of our custom machine learning model, The GIPHY Celebrity Detector, which is able to discern over 2,300 celebrity faces with 98% accuracy. The model was trained to identify the most popular celebs on GIPHY, and can identify and make predictions for multiple faces across a sequence of […]","link":"https://engineering.giphy.com/giphys-ai-can-identify-lil-yachty-can-yours/","owner":"Gilt"},{"title":"JavaScript Performance Pitfalls in V8","description":null,"link":"https://ponyfoo.com/articles/javascript-performance-pitfalls-v8","owner":"Philipp Oppermann"},{"title":"Selective Functors","description":"<p >From Andrey Mokhov's twitter feed:</p>\n<blockquote ><p >\nIs there any intermediate abstraction between applicative functors and monads? And if yes, what is it? In a new paper with @geo2A, @simonmar and @dimenix we explore \"selective functors\", which are essentially applicative functors with branching: <a href=\"https://www.staff.ncl.ac.uk/andrey.mokhov/selective-functors.pdf\">https://www.staff.ncl.ac.uk/andrey.mokhov/selective-functors.pdf</a></p>\n<p >We've implemented selective functors in Haskell: <a href=\"https://github.com/snowleopard/selective\">https://github.com/snowleopard/selective</a>, OCaml: <a href=\"https://github.com/snowleopard/selective-ocaml\">https://github.com/snowleopard/selective-ocaml</a>, and even Coq: <a href=\"https://github.com/tuura/selective-theory-coq\">https://github.com/tuura/selective-theory-coq</a> (the Coq repository contains some proofs of correctness that our selective instances are lawful). And there is also a PureScript fork!</p></blockquote>","link":"http://lambda-the-ultimate.org/story-selective-functors","owner":"Kyle Kingsbury"}]