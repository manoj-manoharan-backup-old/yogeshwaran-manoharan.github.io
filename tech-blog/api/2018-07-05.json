[{"title":"Silly pickle tricks: self-uncompressing pickles","description":"<p>We’ve been working on some pickle security stuff. This is a teaser.</p>\n\n<p>Python pickles are extremely flexible: they can run essentially whatever code they want. That means you can create a pickle that contains a compressed pickle. The consumer doesn’t know if an incoming pickle will be compressed or not: the Pickle VM takes care of the details.</p>\n\n<p>To do this, we define a useful little helper class:</p>\n\n<pre><code class=\"language-python\">class PickleCall(object):\n     def __init__(self, f, *args):\n        self.f, self.args = f, args\n     def __reduce__(self):\n         return self.f, self.args\n</code></pre>\n\n<p>PickleCall is nothing but a convenience function for us to encode the function f being called with some args into a pickle. If you’ve used pickle before and you know that it normally encodes classes by name, you might expect that the <s>victi</s>consumer of the pickle also needs to define PickleCall, but that’s not the case. This class accomplishes that by explicitly ","link":"https://latacora.micro.blog/silly-pickle-tricks/","owner":"Kolosek"}]